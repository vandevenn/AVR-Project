
Digital_Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  00001b12  00001ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  008001d4  008001d4  00001c7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004117  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b2d  00000000  00000000  0000634f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ba8  00000000  00000000  00007e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a08  00000000  00000000  0000aa24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fdb  00000000  00000000  0000b42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000149e  00000000  00000000  0000c407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0000d8a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__vector_9>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c0       	rjmp	.+218    	; 0x11c <__vector_16>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c0       	rjmp	.+130    	; 0xcc <__vector_18>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e1       	ldi	r30, 0x12	; 18
      a0:	fb e1       	ldi	r31, 0x1B	; 27
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3d       	cpi	r26, 0xD4	; 212
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 ed       	ldi	r26, 0xD4	; 212
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 3a       	cpi	r26, 0xA5	; 165
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 74 09 	call	0x12e8	; 0x12e8 <main>
      c6:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_18>:
ï»¿#include "APmain.h"

ISR(USART0_RX_vect)
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	0b b6       	in	r0, 0x3b	; 59
      d8:	0f 92       	push	r0
      da:	2f 93       	push	r18
      dc:	3f 93       	push	r19
      de:	4f 93       	push	r20
      e0:	5f 93       	push	r21
      e2:	6f 93       	push	r22
      e4:	7f 93       	push	r23
      e6:	8f 93       	push	r24
      e8:	9f 93       	push	r25
      ea:	af 93       	push	r26
      ec:	bf 93       	push	r27
      ee:	ef 93       	push	r30
      f0:	ff 93       	push	r31
	UART0_ISR_Process();
      f2:	0e 94 de 09 	call	0x13bc	; 0x13bc <UART0_ISR_Process>
}
      f6:	ff 91       	pop	r31
      f8:	ef 91       	pop	r30
      fa:	bf 91       	pop	r27
      fc:	af 91       	pop	r26
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	7f 91       	pop	r23
     104:	6f 91       	pop	r22
     106:	5f 91       	pop	r21
     108:	4f 91       	pop	r20
     10a:	3f 91       	pop	r19
     10c:	2f 91       	pop	r18
     10e:	0f 90       	pop	r0
     110:	0b be       	out	0x3b, r0	; 59
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	0f 92       	push	r0
     124:	11 24       	eor	r1, r1
     126:	0b b6       	in	r0, 0x3b	; 59
     128:	0f 92       	push	r0
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	ef 93       	push	r30
     140:	ff 93       	push	r31
	FND_ISR_Process();
     142:	0e 94 b7 08 	call	0x116e	; 0x116e <FND_ISR_Process>
	TCNT0 = 130;
     146:	82 e8       	ldi	r24, 0x82	; 130
     148:	82 bf       	out	0x32, r24	; 50
}
     14a:	ff 91       	pop	r31
     14c:	ef 91       	pop	r30
     14e:	bf 91       	pop	r27
     150:	af 91       	pop	r26
     152:	9f 91       	pop	r25
     154:	8f 91       	pop	r24
     156:	7f 91       	pop	r23
     158:	6f 91       	pop	r22
     15a:	5f 91       	pop	r21
     15c:	4f 91       	pop	r20
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0b be       	out	0x3b, r0	; 59
     166:	0f 90       	pop	r0
     168:	0f be       	out	0x3f, r0	; 63
     16a:	0f 90       	pop	r0
     16c:	1f 90       	pop	r1
     16e:	18 95       	reti

00000170 <__vector_9>:

ISR(TIMER2_COMP_vect)
{
     170:	1f 92       	push	r1
     172:	0f 92       	push	r0
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	0f 92       	push	r0
     178:	11 24       	eor	r1, r1
     17a:	0b b6       	in	r0, 0x3b	; 59
     17c:	0f 92       	push	r0
     17e:	2f 93       	push	r18
     180:	3f 93       	push	r19
     182:	4f 93       	push	r20
     184:	5f 93       	push	r21
     186:	6f 93       	push	r22
     188:	7f 93       	push	r23
     18a:	8f 93       	push	r24
     18c:	9f 93       	push	r25
     18e:	af 93       	push	r26
     190:	bf 93       	push	r27
     192:	ef 93       	push	r30
     194:	ff 93       	push	r31
	decmillisec();
     196:	34 d4       	rcall	.+2152   	; 0xa00 <decmillisec>
	IncMilisec();
     198:	f7 d4       	rcall	.+2542   	; 0xb88 <IncMilisec>
     19a:	ff 91       	pop	r31
}
     19c:	ef 91       	pop	r30
     19e:	bf 91       	pop	r27
     1a0:	af 91       	pop	r26
     1a2:	9f 91       	pop	r25
     1a4:	8f 91       	pop	r24
     1a6:	7f 91       	pop	r23
     1a8:	6f 91       	pop	r22
     1aa:	5f 91       	pop	r21
     1ac:	4f 91       	pop	r20
     1ae:	3f 91       	pop	r19
     1b0:	2f 91       	pop	r18
     1b2:	0f 90       	pop	r0
     1b4:	0b be       	out	0x3b, r0	; 59
     1b6:	0f 90       	pop	r0
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	0f 90       	pop	r0
     1bc:	1f 90       	pop	r1
     1be:	18 95       	reti

000001c0 <APMain_init>:
     1c0:	75 d1       	rcall	.+746    	; 0x4ac <Presenter_init>
void APMain_init()
{
	Presenter_init();
	Listener_init();
     1c2:	1b d0       	rcall	.+54     	; 0x1fa <Listener_init>
	LCDtime_init();
     1c4:	d2 d4       	rcall	.+2468   	; 0xb6a <LCDtime_init>
     1c6:	fa d3       	rcall	.+2036   	; 0x9bc <FNDData_init>
	FNDData_init();
     1c8:	0e 94 af 09 	call	0x135e	; 0x135e <TIM0_init>
	TIM0_init();
     1cc:	0e 94 b8 09 	call	0x1370	; 0x1370 <TIM2_init>
	TIM2_init();
     1d0:	78 94       	sei

	sei();
	Model_setAutoStateData(Auto_OFF);
     1d2:	83 e0       	ldi	r24, 0x03	; 3
     1d4:	4a d1       	rcall	.+660    	; 0x46a <Model_setAutoStateData>
	Model_setLCDTimerFlagData(1);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	4e d1       	rcall	.+668    	; 0x476 <Model_setLCDTimerFlagData>
	Model_setManualStateData(Manual_OFF);
     1da:	83 e0       	ldi	r24, 0x03	; 3
     1dc:	52 d1       	rcall	.+676    	; 0x482 <Model_setManualStateData>
	Model_setTimerFlagData(0);
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	5c d1       	rcall	.+696    	; 0x49a <Model_setTimerFlagData>
     1e2:	80 e0       	ldi	r24, 0x00	; 0
	Model_setModeStateData(MANUAL);
     1e4:	54 d1       	rcall	.+680    	; 0x48e <Model_setModeStateData>
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	5e c1       	rjmp	.+700    	; 0x4a6 <Model_setTimerStateData>
	Model_setTimerStateData(No_Timer);
     1ea:	08 95       	ret

000001ec <APMain_execute>:
     1ec:	c3 d0       	rcall	.+390    	; 0x374 <Listener_checkTimerEvent>
     1ee:	a7 d0       	rcall	.+334    	; 0x33e <Listener_checkModeEvent>
     1f0:	2d d0       	rcall	.+90     	; 0x24c <Listener_checkManualEvent>
	Listener_checkTimerEvent();
	Listener_checkModeEvent();
	Listener_checkManualEvent();
	
	
	INC_LCD_run();
     1f2:	5e d5       	rcall	.+2748   	; 0xcb0 <INC_LCD_run>
     1f4:	a3 d4       	rcall	.+2374   	; 0xb3c <FNDDec_Run>
	FNDDec_Run();
     1f6:	c4 c3       	rjmp	.+1928   	; 0x980 <Auto_excute>
     1f8:	08 95       	ret

000001fa <Listener_init>:
	Auto_excute();
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	49 e3       	ldi	r20, 0x39	; 57
     1fe:	50 e0       	ldi	r21, 0x00	; 0
uint8_t *rxString;
button_t btnMode, btnRun, btnOff, btnTimer;

void Listener_init()
{
	Button_init(&btnMode, &DDRA, &PINA, 0);
     200:	6a e3       	ldi	r22, 0x3A	; 58
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	8d e2       	ldi	r24, 0x2D	; 45
     206:	92 e0       	ldi	r25, 0x02	; 2
     208:	6a d5       	rcall	.+2772   	; 0xcde <Button_init>
	Button_init(&btnRun, &DDRA, &PINA, 1);
     20a:	21 e0       	ldi	r18, 0x01	; 1
     20c:	49 e3       	ldi	r20, 0x39	; 57
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	6a e3       	ldi	r22, 0x3A	; 58
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	8b e1       	ldi	r24, 0x1B	; 27
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	62 d5       	rcall	.+2756   	; 0xcde <Button_init>
	Button_init(&btnOff, &DDRA, &PINA, 2);
     21a:	22 e0       	ldi	r18, 0x02	; 2
     21c:	49 e3       	ldi	r20, 0x39	; 57
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	6a e3       	ldi	r22, 0x3A	; 58
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	87 e2       	ldi	r24, 0x27	; 39
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	5a d5       	rcall	.+2740   	; 0xcde <Button_init>
	Button_init(&btnTimer, &DDRA, &PINA, 3);
     22a:	23 e0       	ldi	r18, 0x03	; 3
     22c:	49 e3       	ldi	r20, 0x39	; 57
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	6a e3       	ldi	r22, 0x3A	; 58
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	81 e2       	ldi	r24, 0x21	; 33
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	52 d5       	rcall	.+2724   	; 0xcde <Button_init>
	UART0_init();
     23a:	0e 94 c4 09 	call	0x1388	; 0x1388 <UART0_init>
	rxString = UART0_readRxBuff();
     23e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <UART0_readRxBuff>
     242:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <rxString+0x1>
     246:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <rxString>
     24a:	08 95       	ret

0000024c <Listener_checkManualEvent>:
	}	
}


void Listener_checkManualEvent()
{
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
	uint8_t modeState = Model_getModeStateData();
     250:	1b d1       	rcall	.+566    	; 0x488 <Model_getModeStateData>
     252:	c8 2f       	mov	r28, r24
	uint8_t ManualState = Model_getManualStateData();
     254:	13 d1       	rcall	.+550    	; 0x47c <Model_getManualStateData>
     256:	c1 11       	cpse	r28, r1
	
	if (modeState != MANUAL) return;
     258:	6f c0       	rjmp	.+222    	; 0x338 <Listener_checkManualEvent+0xec>
     25a:	81 30       	cpi	r24, 0x01	; 1
	
	switch(ManualState)
     25c:	b1 f0       	breq	.+44     	; 0x28a <Listener_checkManualEvent+0x3e>
     25e:	28 f0       	brcs	.+10     	; 0x26a <Listener_checkManualEvent+0x1e>
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	11 f1       	breq	.+68     	; 0x2a8 <Listener_checkManualEvent+0x5c>
     264:	83 30       	cpi	r24, 0x03	; 3
     266:	81 f1       	breq	.+96     	; 0x2c8 <Listener_checkManualEvent+0x7c>
     268:	36 c0       	rjmp	.+108    	; 0x2d6 <Listener_checkManualEvent+0x8a>
     26a:	8b e1       	ldi	r24, 0x1B	; 27
	{
		case Manual_FanPower1:
		if(Button_GetState(&btnRun) == ACT_RELEASED){
     26c:	92 e0       	ldi	r25, 0x02	; 2
     26e:	4c d5       	rcall	.+2712   	; 0xd08 <Button_GetState>
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	19 f4       	brne	.+6      	; 0x27a <Listener_checkManualEvent+0x2e>
			ManualState = Manual_FanPower2;
			Model_setManualStateData(ManualState);
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	05 d1       	rcall	.+522    	; 0x482 <Model_setManualStateData>
     278:	2e c0       	rjmp	.+92     	; 0x2d6 <Listener_checkManualEvent+0x8a>
		}
		
		else if(Button_GetState(&btnOff) == ACT_RELEASED){
     27a:	87 e2       	ldi	r24, 0x27	; 39
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	44 d5       	rcall	.+2696   	; 0xd08 <Button_GetState>
     280:	82 30       	cpi	r24, 0x02	; 2
     282:	49 f5       	brne	.+82     	; 0x2d6 <Listener_checkManualEvent+0x8a>
			ManualState = Manual_OFF;
			Model_setManualStateData(ManualState);
     284:	83 e0       	ldi	r24, 0x03	; 3
     286:	fd d0       	rcall	.+506    	; 0x482 <Model_setManualStateData>
     288:	26 c0       	rjmp	.+76     	; 0x2d6 <Listener_checkManualEvent+0x8a>
		}
		
		break;
		
		case Manual_FanPower2:
		if(Button_GetState(&btnRun) == ACT_RELEASED){
     28a:	8b e1       	ldi	r24, 0x1B	; 27
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	3c d5       	rcall	.+2680   	; 0xd08 <Button_GetState>
     290:	82 30       	cpi	r24, 0x02	; 2
     292:	11 f4       	brne	.+4      	; 0x298 <Listener_checkManualEvent+0x4c>
			ManualState = Manual_FanPower3;
			Model_setManualStateData(ManualState);
     294:	f6 d0       	rcall	.+492    	; 0x482 <Model_setManualStateData>
     296:	1f c0       	rjmp	.+62     	; 0x2d6 <Listener_checkManualEvent+0x8a>
		}
		else if(Button_GetState(&btnOff) == ACT_RELEASED){
     298:	87 e2       	ldi	r24, 0x27	; 39
     29a:	92 e0       	ldi	r25, 0x02	; 2
     29c:	35 d5       	rcall	.+2666   	; 0xd08 <Button_GetState>
     29e:	82 30       	cpi	r24, 0x02	; 2
     2a0:	d1 f4       	brne	.+52     	; 0x2d6 <Listener_checkManualEvent+0x8a>
			ManualState = Manual_OFF;
			Model_setManualStateData(ManualState);
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	ee d0       	rcall	.+476    	; 0x482 <Model_setManualStateData>
     2a6:	17 c0       	rjmp	.+46     	; 0x2d6 <Listener_checkManualEvent+0x8a>
		}
		
		break;
		
		case Manual_FanPower3:
		if(Button_GetState(&btnRun) == ACT_RELEASED){
     2a8:	8b e1       	ldi	r24, 0x1B	; 27
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	2d d5       	rcall	.+2650   	; 0xd08 <Button_GetState>
     2ae:	82 30       	cpi	r24, 0x02	; 2
			ManualState = Manual_OFF;
			Model_setManualStateData(ManualState);
     2b0:	19 f4       	brne	.+6      	; 0x2b8 <Listener_checkManualEvent+0x6c>
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	e6 d0       	rcall	.+460    	; 0x482 <Model_setManualStateData>
		}
		else if(Button_GetState(&btnOff) == ACT_RELEASED){
     2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <Listener_checkManualEvent+0x8a>
     2b8:	87 e2       	ldi	r24, 0x27	; 39
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	25 d5       	rcall	.+2634   	; 0xd08 <Button_GetState>
     2be:	82 30       	cpi	r24, 0x02	; 2
			ManualState = Manual_OFF;
			Model_setManualStateData(ManualState);
     2c0:	51 f4       	brne	.+20     	; 0x2d6 <Listener_checkManualEvent+0x8a>
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	de d0       	rcall	.+444    	; 0x482 <Model_setManualStateData>
     2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <Listener_checkManualEvent+0x8a>
		}
		
		break;
		
		case Manual_OFF:
		if(Button_GetState(&btnRun) == ACT_RELEASED){
     2c8:	8b e1       	ldi	r24, 0x1B	; 27
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	1d d5       	rcall	.+2618   	; 0xd08 <Button_GetState>
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <Listener_checkManualEvent+0x8a>
     2d2:	80 e0       	ldi	r24, 0x00	; 0
			ManualState = Manual_FanPower1;
			Model_setManualStateData(ManualState);
     2d4:	d6 d0       	rcall	.+428    	; 0x482 <Model_setManualStateData>
     2d6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <UART0_readyRxFlag>
		}
		break;
	}
	
	if(UART0_readyRxFlag())
     2da:	88 23       	and	r24, r24
     2dc:	69 f1       	breq	.+90     	; 0x338 <Listener_checkManualEvent+0xec>
     2de:	0e 94 d7 09 	call	0x13ae	; 0x13ae <UART0_clearRxFlag>
	{
		UART0_clearRxFlag();
     2e2:	c0 91 19 02 	lds	r28, 0x0219	; 0x800219 <rxString>
		if(!strcmp(rxString, "FanPower1\n"))
     2e6:	d0 91 1a 02 	lds	r29, 0x021A	; 0x80021a <rxString+0x1>
     2ea:	69 e1       	ldi	r22, 0x19	; 25
     2ec:	71 e0       	ldi	r23, 0x01	; 1
     2ee:	ce 01       	movw	r24, r28
     2f0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <strcmp>
     2f4:	89 2b       	or	r24, r25
     2f6:	19 f4       	brne	.+6      	; 0x2fe <Listener_checkManualEvent+0xb2>
		{
			Model_setManualStateData(Manual_FanPower1);
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	c3 d0       	rcall	.+390    	; 0x482 <Model_setManualStateData>
     2fc:	1d c0       	rjmp	.+58     	; 0x338 <Listener_checkManualEvent+0xec>
     2fe:	64 e2       	ldi	r22, 0x24	; 36
		}
		else if(!strcmp(rxString, "FanPower2\n"))
     300:	71 e0       	ldi	r23, 0x01	; 1
     302:	ce 01       	movw	r24, r28
     304:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <strcmp>
     308:	89 2b       	or	r24, r25
     30a:	19 f4       	brne	.+6      	; 0x312 <Listener_checkManualEvent+0xc6>
		{
			Model_setManualStateData(Manual_FanPower2);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	b9 d0       	rcall	.+370    	; 0x482 <Model_setManualStateData>
     310:	13 c0       	rjmp	.+38     	; 0x338 <Listener_checkManualEvent+0xec>
     312:	6f e2       	ldi	r22, 0x2F	; 47
		}
		else if(!strcmp(rxString, "FanPower3\n"))
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	ce 01       	movw	r24, r28
     318:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <strcmp>
     31c:	89 2b       	or	r24, r25
     31e:	19 f4       	brne	.+6      	; 0x326 <Listener_checkManualEvent+0xda>
		{
			Model_setManualStateData(Manual_FanPower3);
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	af d0       	rcall	.+350    	; 0x482 <Model_setManualStateData>
     324:	09 c0       	rjmp	.+18     	; 0x338 <Listener_checkManualEvent+0xec>
     326:	6a e3       	ldi	r22, 0x3A	; 58
		}
		else if(!strcmp(rxString, "FanOff\n"))
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	ce 01       	movw	r24, r28
     32c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <strcmp>
     330:	89 2b       	or	r24, r25
     332:	11 f4       	brne	.+4      	; 0x338 <Listener_checkManualEvent+0xec>
     334:	83 e0       	ldi	r24, 0x03	; 3
		{
			Model_setManualStateData(Manual_OFF);
     336:	a5 d0       	rcall	.+330    	; 0x482 <Model_setManualStateData>
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
		}
	}
}
     33c:	08 95       	ret

0000033e <Listener_checkModeEvent>:
     33e:	a4 d0       	rcall	.+328    	; 0x488 <Model_getModeStateData>
     340:	88 23       	and	r24, r24
}

void Listener_checkModeEvent()
{
	uint8_t ModeState = Model_getModeStateData();
	switch(ModeState)
     342:	19 f0       	breq	.+6      	; 0x34a <Listener_checkModeEvent+0xc>
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	61 f0       	breq	.+24     	; 0x360 <Listener_checkModeEvent+0x22>
	{
		case MANUAL:
		Listener_checkManualEvent();
     348:	08 95       	ret
     34a:	80 df       	rcall	.-256    	; 0x24c <Listener_checkManualEvent>
		if(Button_GetState(&btnMode) == ACT_RELEASED){
     34c:	8d e2       	ldi	r24, 0x2D	; 45
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	db d4       	rcall	.+2486   	; 0xd08 <Button_GetState>
     352:	82 30       	cpi	r24, 0x02	; 2
			Model_setAutoStateData(Auto_OFF);
     354:	71 f4       	brne	.+28     	; 0x372 <Listener_checkModeEvent+0x34>
     356:	83 e0       	ldi	r24, 0x03	; 3
			ModeState = AUTO;
			Model_setModeStateData(ModeState);
     358:	88 d0       	rcall	.+272    	; 0x46a <Model_setAutoStateData>
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	98 c0       	rjmp	.+304    	; 0x48e <Model_setModeStateData>
		}
		break;
		
		case AUTO:
		if(Button_GetState(&btnMode) == ACT_RELEASED){
     35e:	08 95       	ret
     360:	8d e2       	ldi	r24, 0x2D	; 45
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	d1 d4       	rcall	.+2466   	; 0xd08 <Button_GetState>
			Model_setManualStateData(Manual_OFF);
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	21 f4       	brne	.+8      	; 0x372 <Listener_checkModeEvent+0x34>
     36a:	83 e0       	ldi	r24, 0x03	; 3
			ModeState = MANUAL;
			Model_setModeStateData(ModeState);
     36c:	8a d0       	rcall	.+276    	; 0x482 <Model_setManualStateData>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	8e c0       	rjmp	.+284    	; 0x48e <Model_setModeStateData>
     372:	08 95       	ret

00000374 <Listener_checkTimerEvent>:
	UART0_init();
	rxString = UART0_readRxBuff();
}

void Listener_checkTimerEvent()
{
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
	uint8_t TimerState = Model_getTimerStateData();
     378:	93 d0       	rcall	.+294    	; 0x4a0 <Model_getTimerStateData>
	switch(TimerState)
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	11 f1       	breq	.+68     	; 0x3c2 <Listener_checkTimerEvent+0x4e>
     37e:	38 f0       	brcs	.+14     	; 0x38e <Listener_checkTimerEvent+0x1a>
     380:	82 30       	cpi	r24, 0x02	; 2
     382:	09 f4       	brne	.+2      	; 0x386 <Listener_checkTimerEvent+0x12>
     384:	39 c0       	rjmp	.+114    	; 0x3f8 <Listener_checkTimerEvent+0x84>
     386:	83 30       	cpi	r24, 0x03	; 3
     388:	09 f4       	brne	.+2      	; 0x38c <Listener_checkTimerEvent+0x18>
     38a:	50 c0       	rjmp	.+160    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		case No_Timer:
		Listener_checkModeEvent();
     38c:	68 c0       	rjmp	.+208    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     38e:	d7 df       	rcall	.-82     	; 0x33e <Listener_checkModeEvent>
		if(Button_GetState(&btnTimer) == ACT_RELEASED){
     390:	81 e2       	ldi	r24, 0x21	; 33
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	b9 d4       	rcall	.+2418   	; 0xd08 <Button_GetState>
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	09 f0       	breq	.+2      	; 0x39c <Listener_checkTimerEvent+0x28>
     39a:	61 c0       	rjmp	.+194    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			setFNDData(0, 1,0, 0);
     39c:	00 e0       	ldi	r16, 0x00	; 0
     39e:	10 e0       	ldi	r17, 0x00	; 0
     3a0:	98 01       	movw	r18, r16
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	80 e0       	ldi	r24, 0x00	; 0
			Model_setTimerFlagData(1);
     3a8:	18 d3       	rcall	.+1584   	; 0x9da <setFNDData>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
			Model_setLCDTimerFlagData(1);
     3ac:	76 d0       	rcall	.+236    	; 0x49a <Model_setTimerFlagData>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	62 d0       	rcall	.+196    	; 0x476 <Model_setLCDTimerFlagData>
			Fan_On();
     3b2:	a9 d5       	rcall	.+2898   	; 0xf06 <Fan_On>
			StopWatchData = 0;
     3b4:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <StopWatchData+0x1>
			TimerState = One_Min;
			Model_setTimerStateData(TimerState);
     3b8:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <StopWatchData>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		
		case One_Min:
		Listener_checkModeEvent();
     3be:	73 d0       	rcall	.+230    	; 0x4a6 <Model_setTimerStateData>
     3c0:	4e c0       	rjmp	.+156    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		Digital_Fan_Execute_Stop();
     3c2:	bd df       	rcall	.-134    	; 0x33e <Listener_checkModeEvent>
     3c4:	9d d3       	rcall	.+1850   	; 0xb00 <Digital_Fan_Execute_Stop>
		if(Button_GetState(&btnTimer) == ACT_RELEASED){
     3c6:	81 e2       	ldi	r24, 0x21	; 33
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	9e d4       	rcall	.+2364   	; 0xd08 <Button_GetState>
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <Listener_checkTimerEvent+0x5e>
			setFNDData(0, 3,0, 0);
     3d0:	46 c0       	rjmp	.+140    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     3d2:	00 e0       	ldi	r16, 0x00	; 0
     3d4:	10 e0       	ldi	r17, 0x00	; 0
     3d6:	98 01       	movw	r18, r16
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	63 e0       	ldi	r22, 0x03	; 3
			Model_setTimerFlagData(1);
     3dc:	80 e0       	ldi	r24, 0x00	; 0
			Model_setLCDTimerFlagData(1);
     3de:	fd d2       	rcall	.+1530   	; 0x9da <setFNDData>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
			Fan_On();
     3e2:	5b d0       	rcall	.+182    	; 0x49a <Model_setTimerFlagData>
     3e4:	81 e0       	ldi	r24, 0x01	; 1
			StopWatchData = 0;
     3e6:	47 d0       	rcall	.+142    	; 0x476 <Model_setLCDTimerFlagData>
     3e8:	8e d5       	rcall	.+2844   	; 0xf06 <Fan_On>
     3ea:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <StopWatchData+0x1>
			TimerState = Three_Min;
			Model_setTimerStateData(TimerState);
     3ee:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <StopWatchData>
     3f2:	82 e0       	ldi	r24, 0x02	; 2
		}
		break;
		
		case Three_Min:
		Listener_checkModeEvent();
     3f4:	58 d0       	rcall	.+176    	; 0x4a6 <Model_setTimerStateData>
		Digital_Fan_Execute_Stop();
     3f6:	33 c0       	rjmp	.+102    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		if(Button_GetState(&btnTimer) == ACT_RELEASED){
     3f8:	a2 df       	rcall	.-188    	; 0x33e <Listener_checkModeEvent>
     3fa:	82 d3       	rcall	.+1796   	; 0xb00 <Digital_Fan_Execute_Stop>
     3fc:	81 e2       	ldi	r24, 0x21	; 33
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	83 d4       	rcall	.+2310   	; 0xd08 <Button_GetState>
			setFNDData(0, 5,0, 0);
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	61 f5       	brne	.+88     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     406:	00 e0       	ldi	r16, 0x00	; 0
     408:	10 e0       	ldi	r17, 0x00	; 0
     40a:	98 01       	movw	r18, r16
			Model_setTimerFlagData(1);
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	65 e0       	ldi	r22, 0x05	; 5
     410:	80 e0       	ldi	r24, 0x00	; 0
			Model_setLCDTimerFlagData(1);
     412:	e3 d2       	rcall	.+1478   	; 0x9da <setFNDData>
     414:	81 e0       	ldi	r24, 0x01	; 1
			Fan_On();
     416:	41 d0       	rcall	.+130    	; 0x49a <Model_setTimerFlagData>
			StopWatchData = 0;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	2d d0       	rcall	.+90     	; 0x476 <Model_setLCDTimerFlagData>
			TimerState = Five_Min;
			Model_setTimerStateData(TimerState);
     41c:	74 d5       	rcall	.+2792   	; 0xf06 <Fan_On>
     41e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <StopWatchData+0x1>
     422:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <StopWatchData>
		}
		break;
		
		case Five_Min:
		Listener_checkModeEvent();
		Digital_Fan_Execute_Stop();
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	3e d0       	rcall	.+124    	; 0x4a6 <Model_setTimerStateData>
		if(Button_GetState(&btnTimer) == ACT_RELEASED){
     42a:	19 c0       	rjmp	.+50     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     42c:	88 df       	rcall	.-240    	; 0x33e <Listener_checkModeEvent>
     42e:	68 d3       	rcall	.+1744   	; 0xb00 <Digital_Fan_Execute_Stop>
     430:	81 e2       	ldi	r24, 0x21	; 33
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	69 d4       	rcall	.+2258   	; 0xd08 <Button_GetState>
			setFNDData(0, 0,0, 0);
     436:	82 30       	cpi	r24, 0x02	; 2
     438:	91 f4       	brne	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     43a:	00 e0       	ldi	r16, 0x00	; 0
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	98 01       	movw	r18, r16
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	80 e0       	ldi	r24, 0x00	; 0
			Model_setTimerFlagData(0);
     446:	c9 d2       	rcall	.+1426   	; 0x9da <setFNDData>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	27 d0       	rcall	.+78     	; 0x49a <Model_setTimerFlagData>
			Model_setLCDTimerFlagData(1);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	13 d0       	rcall	.+38     	; 0x476 <Model_setLCDTimerFlagData>
     450:	5a d5       	rcall	.+2740   	; 0xf06 <Fan_On>
			Fan_On();
     452:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <StopWatchData+0x1>
			StopWatchData = 0;
     456:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <StopWatchData>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	24 d0       	rcall	.+72     	; 0x4a6 <Model_setTimerStateData>
			TimerState = No_Timer;
			Model_setTimerStateData(TimerState);
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <Model_getAutoStateData>:
     464:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <AutoStateData>
     468:	08 95       	ret

0000046a <Model_setAutoStateData>:
     46a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <AutoStateData>
     46e:	08 95       	ret

00000470 <Model_getLCDTimerFlagData>:
     470:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <LCDTimerFlagData>
     474:	08 95       	ret

00000476 <Model_setLCDTimerFlagData>:
     476:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <LCDTimerFlagData>
     47a:	08 95       	ret

0000047c <Model_getManualStateData>:
     47c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <ManualStateData>
     480:	08 95       	ret

00000482 <Model_setManualStateData>:
     482:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <ManualStateData>
     486:	08 95       	ret

00000488 <Model_getModeStateData>:
     488:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <ModeStateData>
     48c:	08 95       	ret

0000048e <Model_setModeStateData>:
     48e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <ModeStateData>
     492:	08 95       	ret

00000494 <Model_getTimerFlagData>:
     494:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <TimerFlagData>
     498:	08 95       	ret

0000049a <Model_setTimerFlagData>:
     49a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <TimerFlagData>
     49e:	08 95       	ret

000004a0 <Model_getTimerStateData>:
     4a0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <TimerStateData>
     4a4:	08 95       	ret

000004a6 <Model_setTimerStateData>:
     4a6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <TimerStateData>
     4aa:	08 95       	ret

000004ac <Presenter_init>:
ï»¿#include "Presenter.h"
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_Transmit, NULL, _FDEV_SETUP_WRITE);

void Presenter_init()
{
	FND_init();
     4ac:	47 d5       	rcall	.+2702   	; 0xf3c <FND_init>
	I2C_LCD_init();
     4ae:	c3 d6       	rcall	.+3462   	; 0x1236 <I2C_LCD_init>
	Fan_init();
     4b0:	02 d5       	rcall	.+2564   	; 0xeb6 <Fan_init>
	Buzzer_init();
     4b2:	56 d4       	rcall	.+2220   	; 0xd60 <Buzzer_init>
     4b4:	69 d7       	rcall	.+3794   	; 0x1388 <UART0_init>
	UART0_init();
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	91 e0       	ldi	r25, 0x01	; 1
	stdout = &OUTPUT;
     4ba:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__iob+0x3>
     4be:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <__iob+0x2>
     4c2:	08 95       	ret

000004c4 <Presenter_disLCDData>:
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
}

void Presenter_disLCDData(uint8_t L_hour,uint8_t L_min,uint8_t L_sec,uint32_t L_millisec)
{
     4c8:	df 93       	push	r29
	sprintf(buff, "Time %02d: %02d: %02d" , L_hour, L_min, L_sec);
     4ca:	1f 92       	push	r1
     4cc:	4f 93       	push	r20
     4ce:	1f 92       	push	r1
     4d0:	6f 93       	push	r22
     4d2:	1f 92       	push	r1
     4d4:	8f 93       	push	r24
     4d6:	82 e4       	ldi	r24, 0x42	; 66
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	89 ef       	ldi	r24, 0xF9	; 249
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <sprintf>
	LCD_writeStringXY(0,0, buff);
     4ea:	49 ef       	ldi	r20, 0xF9	; 249
     4ec:	51 e0       	ldi	r21, 0x01	; 1
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	f1 d6       	rcall	.+3554   	; 0x12d6 <LCD_writeStringXY>
	
	uint8_t modeState = Model_getModeStateData();
     4f4:	c9 df       	rcall	.-110    	; 0x488 <Model_getModeStateData>
     4f6:	c8 2f       	mov	r28, r24
	uint8_t autoState = Model_getAutoStateData();
     4f8:	b5 df       	rcall	.-150    	; 0x464 <Model_getAutoStateData>
     4fa:	18 2f       	mov	r17, r24
	uint8_t manualState = Model_getManualStateData();
     4fc:	bf df       	rcall	.-130    	; 0x47c <Model_getManualStateData>
     4fe:	d8 2f       	mov	r29, r24
     500:	8d b7       	in	r24, 0x3d	; 61
	
	if(modeState == AUTO)
     502:	9e b7       	in	r25, 0x3e	; 62
     504:	0a 96       	adiw	r24, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	9e bf       	out	0x3e, r25	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	8d bf       	out	0x3d, r24	; 61
     510:	c1 30       	cpi	r28, 0x01	; 1
     512:	09 f0       	breq	.+2      	; 0x516 <Presenter_disLCDData+0x52>
     514:	43 c0       	rjmp	.+134    	; 0x59c <Presenter_disLCDData+0xd8>
     516:	11 30       	cpi	r17, 0x01	; 1
	{
		switch(autoState) {
     518:	21 f1       	breq	.+72     	; 0x562 <Presenter_disLCDData+0x9e>
     51a:	a0 f0       	brcs	.+40     	; 0x544 <Presenter_disLCDData+0x80>
     51c:	12 30       	cpi	r17, 0x02	; 2
     51e:	81 f1       	breq	.+96     	; 0x580 <Presenter_disLCDData+0xbc>
     520:	13 30       	cpi	r17, 0x03	; 3
     522:	09 f0       	breq	.+2      	; 0x526 <Presenter_disLCDData+0x62>
     524:	3b c0       	rjmp	.+118    	; 0x59c <Presenter_disLCDData+0xd8>
     526:	8a e0       	ldi	r24, 0x0A	; 10
			case Auto_OFF :
			sprintf(buff, "Wind:AOFF");
     528:	e8 e5       	ldi	r30, 0x58	; 88
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	a9 ef       	ldi	r26, 0xF9	; 249
     52e:	b1 e0       	ldi	r27, 0x01	; 1
     530:	01 90       	ld	r0, Z+
     532:	0d 92       	st	X+, r0
     534:	8a 95       	dec	r24
     536:	e1 f7       	brne	.-8      	; 0x530 <Presenter_disLCDData+0x6c>
     538:	49 ef       	ldi	r20, 0xF9	; 249
			LCD_writeStringXY(1,0, buff);
     53a:	51 e0       	ldi	r21, 0x01	; 1
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	ca d6       	rcall	.+3476   	; 0x12d6 <LCD_writeStringXY>
     542:	2c c0       	rjmp	.+88     	; 0x59c <Presenter_disLCDData+0xd8>
			break;
     544:	8a e0       	ldi	r24, 0x0A	; 10
			
			case Auto_FanPower1 :
			sprintf(buff, "Wind:A1  ");
     546:	e2 e6       	ldi	r30, 0x62	; 98
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	a9 ef       	ldi	r26, 0xF9	; 249
     54c:	b1 e0       	ldi	r27, 0x01	; 1
     54e:	01 90       	ld	r0, Z+
     550:	0d 92       	st	X+, r0
     552:	8a 95       	dec	r24
     554:	e1 f7       	brne	.-8      	; 0x54e <Presenter_disLCDData+0x8a>
			LCD_writeStringXY(1,0, buff);
     556:	49 ef       	ldi	r20, 0xF9	; 249
     558:	51 e0       	ldi	r21, 0x01	; 1
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	bb d6       	rcall	.+3446   	; 0x12d6 <LCD_writeStringXY>
     560:	1d c0       	rjmp	.+58     	; 0x59c <Presenter_disLCDData+0xd8>
			break;
     562:	8a e0       	ldi	r24, 0x0A	; 10
			
			case  Auto_FanPower2:
			sprintf(buff, "Wind:A2  ");
     564:	ec e6       	ldi	r30, 0x6C	; 108
     566:	f1 e0       	ldi	r31, 0x01	; 1
     568:	a9 ef       	ldi	r26, 0xF9	; 249
     56a:	b1 e0       	ldi	r27, 0x01	; 1
     56c:	01 90       	ld	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	8a 95       	dec	r24
     572:	e1 f7       	brne	.-8      	; 0x56c <Presenter_disLCDData+0xa8>
			LCD_writeStringXY(1,0, buff);
     574:	49 ef       	ldi	r20, 0xF9	; 249
     576:	51 e0       	ldi	r21, 0x01	; 1
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	ac d6       	rcall	.+3416   	; 0x12d6 <LCD_writeStringXY>
     57e:	0e c0       	rjmp	.+28     	; 0x59c <Presenter_disLCDData+0xd8>
			break;
     580:	8a e0       	ldi	r24, 0x0A	; 10
			
			case Auto_FanPower3 :
			sprintf(buff, "Wind:A3  ");
     582:	e6 e7       	ldi	r30, 0x76	; 118
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	a9 ef       	ldi	r26, 0xF9	; 249
     588:	b1 e0       	ldi	r27, 0x01	; 1
     58a:	01 90       	ld	r0, Z+
     58c:	0d 92       	st	X+, r0
     58e:	8a 95       	dec	r24
     590:	e1 f7       	brne	.-8      	; 0x58a <Presenter_disLCDData+0xc6>
			LCD_writeStringXY(1,0, buff);
     592:	49 ef       	ldi	r20, 0xF9	; 249
     594:	51 e0       	ldi	r21, 0x01	; 1
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	9d d6       	rcall	.+3386   	; 0x12d6 <LCD_writeStringXY>
     59c:	c1 11       	cpse	r28, r1
			break;
		}	
	}
	
	if(modeState == MANUAL)
     59e:	43 c0       	rjmp	.+134    	; 0x626 <Presenter_disLCDData+0x162>
     5a0:	d1 30       	cpi	r29, 0x01	; 1
	{
		switch(manualState) {
     5a2:	21 f1       	breq	.+72     	; 0x5ec <Presenter_disLCDData+0x128>
     5a4:	a0 f0       	brcs	.+40     	; 0x5ce <Presenter_disLCDData+0x10a>
     5a6:	d2 30       	cpi	r29, 0x02	; 2
     5a8:	81 f1       	breq	.+96     	; 0x60a <Presenter_disLCDData+0x146>
     5aa:	d3 30       	cpi	r29, 0x03	; 3
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <Presenter_disLCDData+0xec>
     5ae:	3b c0       	rjmp	.+118    	; 0x626 <Presenter_disLCDData+0x162>
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
			case Manual_OFF :
			sprintf(buff, "Wind:MOFF");
     5b2:	e0 e8       	ldi	r30, 0x80	; 128
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	a9 ef       	ldi	r26, 0xF9	; 249
     5b8:	b1 e0       	ldi	r27, 0x01	; 1
     5ba:	01 90       	ld	r0, Z+
     5bc:	0d 92       	st	X+, r0
     5be:	8a 95       	dec	r24
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <Presenter_disLCDData+0xf6>
			LCD_writeStringXY(1,0, buff);
     5c2:	49 ef       	ldi	r20, 0xF9	; 249
     5c4:	51 e0       	ldi	r21, 0x01	; 1
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	85 d6       	rcall	.+3338   	; 0x12d6 <LCD_writeStringXY>
     5cc:	2c c0       	rjmp	.+88     	; 0x626 <Presenter_disLCDData+0x162>
			break;
     5ce:	8a e0       	ldi	r24, 0x0A	; 10
			
			case Manual_FanPower1 :
			sprintf(buff, "Wind:M1  ");
     5d0:	ea e8       	ldi	r30, 0x8A	; 138
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	a9 ef       	ldi	r26, 0xF9	; 249
     5d6:	b1 e0       	ldi	r27, 0x01	; 1
     5d8:	01 90       	ld	r0, Z+
     5da:	0d 92       	st	X+, r0
     5dc:	8a 95       	dec	r24
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <Presenter_disLCDData+0x114>
			LCD_writeStringXY(1,0, buff);
     5e0:	49 ef       	ldi	r20, 0xF9	; 249
     5e2:	51 e0       	ldi	r21, 0x01	; 1
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	76 d6       	rcall	.+3308   	; 0x12d6 <LCD_writeStringXY>
     5ea:	1d c0       	rjmp	.+58     	; 0x626 <Presenter_disLCDData+0x162>
			break;
     5ec:	8a e0       	ldi	r24, 0x0A	; 10
			
			case  Manual_FanPower2:
			sprintf(buff, "Wind:M2  ");
     5ee:	e4 e9       	ldi	r30, 0x94	; 148
     5f0:	f1 e0       	ldi	r31, 0x01	; 1
     5f2:	a9 ef       	ldi	r26, 0xF9	; 249
     5f4:	b1 e0       	ldi	r27, 0x01	; 1
     5f6:	01 90       	ld	r0, Z+
     5f8:	0d 92       	st	X+, r0
     5fa:	8a 95       	dec	r24
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <Presenter_disLCDData+0x132>
			LCD_writeStringXY(1,0, buff);
     5fe:	49 ef       	ldi	r20, 0xF9	; 249
     600:	51 e0       	ldi	r21, 0x01	; 1
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	67 d6       	rcall	.+3278   	; 0x12d6 <LCD_writeStringXY>
     608:	0e c0       	rjmp	.+28     	; 0x626 <Presenter_disLCDData+0x162>
			break;
     60a:	8a e0       	ldi	r24, 0x0A	; 10
			
			case Manual_FanPower3 :
			sprintf(buff, "Wind:M3  ");
     60c:	ee e9       	ldi	r30, 0x9E	; 158
     60e:	f1 e0       	ldi	r31, 0x01	; 1
     610:	a9 ef       	ldi	r26, 0xF9	; 249
     612:	b1 e0       	ldi	r27, 0x01	; 1
     614:	01 90       	ld	r0, Z+
     616:	0d 92       	st	X+, r0
     618:	8a 95       	dec	r24
     61a:	e1 f7       	brne	.-8      	; 0x614 <Presenter_disLCDData+0x150>
			LCD_writeStringXY(1,0, buff);
     61c:	49 ef       	ldi	r20, 0xF9	; 249
     61e:	51 e0       	ldi	r21, 0x01	; 1
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	58 d6       	rcall	.+3248   	; 0x12d6 <LCD_writeStringXY>
     626:	87 e0       	ldi	r24, 0x07	; 7
			break;
		}
	}
	
	
	sprintf(buff, " 2 FAN");
     628:	e8 ea       	ldi	r30, 0xA8	; 168
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	a9 ef       	ldi	r26, 0xF9	; 249
     62e:	b1 e0       	ldi	r27, 0x01	; 1
     630:	01 90       	ld	r0, Z+
     632:	0d 92       	st	X+, r0
     634:	8a 95       	dec	r24
     636:	e1 f7       	brne	.-8      	; 0x630 <Presenter_disLCDData+0x16c>
	LCD_writeStringXY(1,9, buff);
     638:	49 ef       	ldi	r20, 0xF9	; 249
     63a:	51 e0       	ldi	r21, 0x01	; 1
     63c:	69 e0       	ldi	r22, 0x09	; 9
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	4a d6       	rcall	.+3220   	; 0x12d6 <LCD_writeStringXY>
     642:	df 91       	pop	r29
}
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	08 95       	ret

0000064a <Presenter_disFNDData>:
     64a:	84 2f       	mov	r24, r20


void Presenter_disFNDData(uint8_t F_hour,uint8_t F_min,uint8_t F_sec,uint32_t F_millisec)
{
	StopWatchData = (F_min * 100) + (F_sec);
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	24 e6       	ldi	r18, 0x64	; 100
     650:	62 9f       	mul	r22, r18
     652:	80 0d       	add	r24, r0
     654:	91 1d       	adc	r25, r1
     656:	11 24       	eor	r1, r1
     658:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <StopWatchData+0x1>
     65c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <StopWatchData>
	FND_setFndData(StopWatchData);
     660:	81 c5       	rjmp	.+2818   	; 0x1164 <FND_setFndData>
     662:	08 95       	ret

00000664 <Presenter_soundBuzzer>:
}


void Presenter_soundBuzzer()
{
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
	uint8_t modeState = Model_getModeStateData();
     66a:	0e df       	rcall	.-484    	; 0x488 <Model_getModeStateData>
     66c:	c8 2f       	mov	r28, r24
	static int previousState_one = 0;  // ì´ê¸°ê°ì¼ë¡ ììë¥¼ ì¬ì©íì¬ ì´ê¸° ìíì ë¤ë¥´ê² ì¤ì 
	uint8_t ManualState = Model_getManualStateData();
     66e:	06 df       	rcall	.-500    	; 0x47c <Model_getManualStateData>
     670:	c1 11       	cpse	r28, r1
	uint8_t currentState_one = ManualState;

	if(modeState == MANUAL)
     672:	1b c0       	rjmp	.+54     	; 0x6aa <Presenter_soundBuzzer+0x46>
     674:	08 2f       	mov	r16, r24
	{
		if (previousState_one != currentState_one) {
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <previousState_one.2226>
     67c:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <previousState_one.2226+0x1>
     680:	02 17       	cp	r16, r18
     682:	13 07       	cpc	r17, r19
     684:	91 f0       	breq	.+36     	; 0x6aa <Presenter_soundBuzzer+0x46>
     686:	81 30       	cpi	r24, 0x01	; 1
			// ìíê° ë³ê²½ëìì ëë§ ì¶ë ¥
			switch(currentState_one) {
     688:	49 f0       	breq	.+18     	; 0x69c <Presenter_soundBuzzer+0x38>
     68a:	30 f0       	brcs	.+12     	; 0x698 <Presenter_soundBuzzer+0x34>
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	41 f0       	breq	.+16     	; 0x6a0 <Presenter_soundBuzzer+0x3c>
     690:	83 30       	cpi	r24, 0x03	; 3
     692:	39 f4       	brne	.+14     	; 0x6a2 <Presenter_soundBuzzer+0x3e>
				case Manual_OFF :
				Buzzer_powerOFFSound();
     694:	d5 d3       	rcall	.+1962   	; 0xe40 <Buzzer_powerOFFSound>
				break;
				
				case Manual_FanPower1 :
				Buzzer_powerOnSound();
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <Presenter_soundBuzzer+0x3e>
				break;
     698:	98 d3       	rcall	.+1840   	; 0xdca <Buzzer_powerOnSound>
				
				case  Manual_FanPower2:
				Buzzer_powerOnSound();
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <Presenter_soundBuzzer+0x3e>
     69c:	96 d3       	rcall	.+1836   	; 0xdca <Buzzer_powerOnSound>
				break;
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <Presenter_soundBuzzer+0x3e>
				
				case Manual_FanPower3 :
				Buzzer_powerOnSound();
     6a0:	94 d3       	rcall	.+1832   	; 0xdca <Buzzer_powerOnSound>
				break;
			}
			// ìíê° ë³ê²½ë ê²½ì°ìë§ ì´ì  ìíë¥¼ ê°±ì 
			previousState_one = currentState_one;
     6a2:	10 93 dd 01 	sts	0x01DD, r17	; 0x8001dd <previousState_one.2226+0x1>
     6a6:	00 93 dc 01 	sts	0x01DC, r16	; 0x8001dc <previousState_one.2226>
		}
	}

	
	static int previousState_two = 0;  // ì´ê¸°ê°ì¼ë¡ ììë¥¼ ì¬ì©íì¬ ì´ê¸° ìíì ë¤ë¥´ê² ì¤ì 
	uint8_t AutoState = Model_getAutoStateData();
     6aa:	dc de       	rcall	.-584    	; 0x464 <Model_getAutoStateData>
     6ac:	c1 30       	cpi	r28, 0x01	; 1
	uint8_t currentState_two = AutoState;

	if(modeState == AUTO)
     6ae:	d9 f4       	brne	.+54     	; 0x6e6 <Presenter_soundBuzzer+0x82>
     6b0:	08 2f       	mov	r16, r24
	{
		if (previousState_two != currentState_two) {
     6b2:	10 e0       	ldi	r17, 0x00	; 0
     6b4:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <previousState_two.2234>
     6b8:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <previousState_two.2234+0x1>
     6bc:	02 17       	cp	r16, r18
     6be:	13 07       	cpc	r17, r19
     6c0:	91 f0       	breq	.+36     	; 0x6e6 <Presenter_soundBuzzer+0x82>
     6c2:	81 30       	cpi	r24, 0x01	; 1
			// ìíê° ë³ê²½ëìì ëë§ ì¶ë ¥
			switch(currentState_two) {
     6c4:	49 f0       	breq	.+18     	; 0x6d8 <Presenter_soundBuzzer+0x74>
     6c6:	30 f0       	brcs	.+12     	; 0x6d4 <Presenter_soundBuzzer+0x70>
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	41 f0       	breq	.+16     	; 0x6dc <Presenter_soundBuzzer+0x78>
				case Auto_OFF :
				Buzzer_powerOFFSound();
     6cc:	83 30       	cpi	r24, 0x03	; 3
     6ce:	39 f4       	brne	.+14     	; 0x6de <Presenter_soundBuzzer+0x7a>
				break;
     6d0:	b7 d3       	rcall	.+1902   	; 0xe40 <Buzzer_powerOFFSound>
				
				case Auto_FanPower1 :
				Buzzer_powerOnSound();
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <Presenter_soundBuzzer+0x7a>
     6d4:	7a d3       	rcall	.+1780   	; 0xdca <Buzzer_powerOnSound>
				break;
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <Presenter_soundBuzzer+0x7a>
				
				case  Auto_FanPower2:
				Buzzer_powerOnSound();
     6d8:	78 d3       	rcall	.+1776   	; 0xdca <Buzzer_powerOnSound>
     6da:	01 c0       	rjmp	.+2      	; 0x6de <Presenter_soundBuzzer+0x7a>
				break;
     6dc:	76 d3       	rcall	.+1772   	; 0xdca <Buzzer_powerOnSound>
				
				case Auto_FanPower3 :
				Buzzer_powerOnSound();
     6de:	10 93 db 01 	sts	0x01DB, r17	; 0x8001db <previousState_two.2234+0x1>
				break;
			}
			// ìíê° ë³ê²½ë ê²½ì°ìë§ ì´ì  ìíë¥¼ ê°±ì 
			previousState_two = currentState_two;
     6e2:	00 93 da 01 	sts	0x01DA, r16	; 0x8001da <previousState_two.2234>
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
		}		
	}
	
}
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <Presenter_runFan>:
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17




void Presenter_runFan()
{
     6f2:	cf 93       	push	r28
	uint8_t modeState = Model_getModeStateData();
     6f4:	c9 de       	rcall	.-622    	; 0x488 <Model_getModeStateData>
     6f6:	c8 2f       	mov	r28, r24
	static int previousState_one = 0;  // ì´ê¸°ê°ì¼ë¡ ììë¥¼ ì¬ì©íì¬ ì´ê¸° ìíì ë¤ë¥´ê² ì¤ì 
	uint8_t ManualState = Model_getManualStateData();
     6f8:	c1 de       	rcall	.-638    	; 0x47c <Model_getManualStateData>
     6fa:	c1 11       	cpse	r28, r1
	uint8_t currentState_one = ManualState;
	
	if(modeState == MANUAL)
     6fc:	1b c0       	rjmp	.+54     	; 0x734 <Presenter_runFan+0x46>
     6fe:	08 2f       	mov	r16, r24
	{
		if (previousState_one != currentState_one) {
     700:	10 e0       	ldi	r17, 0x00	; 0
     702:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <previousState_one.2245>
     706:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <previousState_one.2245+0x1>
     70a:	02 17       	cp	r16, r18
     70c:	13 07       	cpc	r17, r19
     70e:	91 f0       	breq	.+36     	; 0x734 <Presenter_runFan+0x46>
     710:	81 30       	cpi	r24, 0x01	; 1
			// ìíê° ë³ê²½ëìì ëë§ ì¶ë ¥
			switch(currentState_one) {
     712:	49 f0       	breq	.+18     	; 0x726 <Presenter_runFan+0x38>
     714:	30 f0       	brcs	.+12     	; 0x722 <Presenter_runFan+0x34>
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	41 f0       	breq	.+16     	; 0x72a <Presenter_runFan+0x3c>
     71a:	83 30       	cpi	r24, 0x03	; 3
     71c:	39 f4       	brne	.+14     	; 0x72c <Presenter_runFan+0x3e>
				case Manual_OFF :
				Fan_off();
     71e:	f9 d3       	rcall	.+2034   	; 0xf12 <Fan_off>
				break;
				
				case Manual_FanPower1 :
				Fan_Power1();
     720:	05 c0       	rjmp	.+10     	; 0x72c <Presenter_runFan+0x3e>
				break;
     722:	fd d3       	rcall	.+2042   	; 0xf1e <Fan_Power1>
				
				case  Manual_FanPower2:
				Fan_Power2();
     724:	03 c0       	rjmp	.+6      	; 0x72c <Presenter_runFan+0x3e>
     726:	00 d4       	rcall	.+2048   	; 0xf28 <Fan_Power2>
				break;
     728:	01 c0       	rjmp	.+2      	; 0x72c <Presenter_runFan+0x3e>
				
				case Manual_FanPower3 :
				Fan_Power3();
     72a:	03 d4       	rcall	.+2054   	; 0xf32 <Fan_Power3>
				break;
			}
			// ìíê° ë³ê²½ë ê²½ì°ìë§ ì´ì  ìíë¥¼ ê°±ì 
			previousState_one = currentState_one;
     72c:	10 93 d9 01 	sts	0x01D9, r17	; 0x8001d9 <previousState_one.2245+0x1>
     730:	00 93 d8 01 	sts	0x01D8, r16	; 0x8001d8 <previousState_one.2245>
	}
	
	
	
	static int previousState_two = 0;  // ì´ê¸°ê°ì¼ë¡ ììë¥¼ ì¬ì©íì¬ ì´ê¸° ìíì ë¤ë¥´ê² ì¤ì 
	uint8_t AutoState = Model_getAutoStateData();
     734:	97 de       	rcall	.-722    	; 0x464 <Model_getAutoStateData>
     736:	c1 30       	cpi	r28, 0x01	; 1
	uint8_t currentState_two = AutoState;

	if(modeState == AUTO)
     738:	d9 f4       	brne	.+54     	; 0x770 <Presenter_runFan+0x82>
     73a:	08 2f       	mov	r16, r24
	{
		if (previousState_two != currentState_two) {
     73c:	10 e0       	ldi	r17, 0x00	; 0
     73e:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <previousState_two.2253>
     742:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <previousState_two.2253+0x1>
     746:	02 17       	cp	r16, r18
     748:	13 07       	cpc	r17, r19
     74a:	91 f0       	breq	.+36     	; 0x770 <Presenter_runFan+0x82>
     74c:	81 30       	cpi	r24, 0x01	; 1
			// ìíê° ë³ê²½ëìì ëë§ ì¶ë ¥
			switch(currentState_two) {
     74e:	49 f0       	breq	.+18     	; 0x762 <Presenter_runFan+0x74>
     750:	30 f0       	brcs	.+12     	; 0x75e <Presenter_runFan+0x70>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	41 f0       	breq	.+16     	; 0x766 <Presenter_runFan+0x78>
				case Auto_OFF :
				Fan_off();
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	39 f4       	brne	.+14     	; 0x768 <Presenter_runFan+0x7a>
				break;
     75a:	db d3       	rcall	.+1974   	; 0xf12 <Fan_off>
				
				case Auto_FanPower1 :
				Fan_Power1();
     75c:	05 c0       	rjmp	.+10     	; 0x768 <Presenter_runFan+0x7a>
     75e:	df d3       	rcall	.+1982   	; 0xf1e <Fan_Power1>
				break;
     760:	03 c0       	rjmp	.+6      	; 0x768 <Presenter_runFan+0x7a>
				
				case  Auto_FanPower2:
				Fan_Power2();
     762:	e2 d3       	rcall	.+1988   	; 0xf28 <Fan_Power2>
     764:	01 c0       	rjmp	.+2      	; 0x768 <Presenter_runFan+0x7a>
				break;
     766:	e5 d3       	rcall	.+1994   	; 0xf32 <Fan_Power3>
				
				case Auto_FanPower3 :
				Fan_Power3();
     768:	10 93 d7 01 	sts	0x01D7, r17	; 0x8001d7 <previousState_two.2253+0x1>
				break;
			}
			// ìíê° ë³ê²½ë ê²½ì°ìë§ ì´ì  ìíë¥¼ ê°±ì 
			previousState_two = currentState_two;
     76c:	00 93 d6 01 	sts	0x01D6, r16	; 0x8001d6 <previousState_two.2253>
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
		}
	}
}
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <Presenter_disUART>:
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15

void Presenter_disUART()
{
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
	uint8_t modeState = Model_getModeStateData();
     782:	82 de       	rcall	.-764    	; 0x488 <Model_getModeStateData>
     784:	c8 2f       	mov	r28, r24
	static int previousState = 0;  // ì´ê¸°ê°ì¼ë¡ ììë¥¼ ì¬ì©íì¬ ì´ê¸° ìíì ë¤ë¥´ê² ì¤ì 
	uint8_t ManualState = Model_getManualStateData();
     786:	7a de       	rcall	.-780    	; 0x47c <Model_getManualStateData>
     788:	d8 2f       	mov	r29, r24
	uint8_t AutoState = Model_getAutoStateData();
     78a:	6c de       	rcall	.-808    	; 0x464 <Model_getAutoStateData>
     78c:	18 2f       	mov	r17, r24
     78e:	c1 11       	cpse	r28, r1
	uint8_t currentState_M = ManualState;
	uint8_t currentState_A = AutoState;

	if(modeState == MANUAL)
     790:	23 c0       	rjmp	.+70     	; 0x7d8 <Presenter_disUART+0x60>
     792:	ed 2e       	mov	r14, r29
	{
		if (previousState != currentState_M) {
     794:	f1 2c       	mov	r15, r1
     796:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
     79a:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x1>
     79e:	e8 16       	cp	r14, r24
     7a0:	f9 06       	cpc	r15, r25
     7a2:	d1 f0       	breq	.+52     	; 0x7d8 <Presenter_disUART+0x60>
     7a4:	d1 30       	cpi	r29, 0x01	; 1
			// ìíê° ë³ê²½ëìì ëë§ ì¶ë ¥
			switch(currentState_M) {
     7a6:	69 f0       	breq	.+26     	; 0x7c2 <Presenter_disUART+0x4a>
     7a8:	40 f0       	brcs	.+16     	; 0x7ba <Presenter_disUART+0x42>
     7aa:	d2 30       	cpi	r29, 0x02	; 2
     7ac:	71 f0       	breq	.+28     	; 0x7ca <Presenter_disUART+0x52>
     7ae:	d3 30       	cpi	r29, 0x03	; 3
     7b0:	79 f4       	brne	.+30     	; 0x7d0 <Presenter_disUART+0x58>
				case Manual_OFF :
				printf("FanOff\n");
     7b2:	8f ea       	ldi	r24, 0xAF	; 175
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	a0 d6       	rcall	.+3392   	; 0x14f8 <puts>
				break;
     7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <Presenter_disUART+0x58>
				
				case Manual_FanPower1 :
				printf("FanPower1\n");
     7ba:	86 eb       	ldi	r24, 0xB6	; 182
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	9c d6       	rcall	.+3384   	; 0x14f8 <puts>
				break;
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <Presenter_disUART+0x58>
				
				case  Manual_FanPower2:
				printf("FanPower2\n");
     7c2:	80 ec       	ldi	r24, 0xC0	; 192
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	98 d6       	rcall	.+3376   	; 0x14f8 <puts>
				break;
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <Presenter_disUART+0x58>
				
				case Manual_FanPower3 :
				printf("FanPower3\n");
     7ca:	8a ec       	ldi	r24, 0xCA	; 202
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	94 d6       	rcall	.+3368   	; 0x14f8 <puts>
     7d0:	f0 92 d5 01 	sts	0x01D5, r15	; 0x8001d5 <__data_end+0x1>
				break;
			}
			// ìíê° ë³ê²½ë ê²½ì°ìë§ ì´ì  ìíë¥¼ ê°±ì 
			previousState = currentState_M;
     7d4:	e0 92 d4 01 	sts	0x01D4, r14	; 0x8001d4 <__data_end>
     7d8:	c1 30       	cpi	r28, 0x01	; 1
		}
	}

	if(modeState == AUTO)
     7da:	19 f5       	brne	.+70     	; 0x822 <Presenter_disUART+0xaa>
     7dc:	c1 2f       	mov	r28, r17
	{
		if (previousState != currentState_A) {
     7de:	d0 e0       	ldi	r29, 0x00	; 0
     7e0:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
     7e4:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x1>
     7e8:	c8 17       	cp	r28, r24
     7ea:	d9 07       	cpc	r29, r25
     7ec:	d1 f0       	breq	.+52     	; 0x822 <Presenter_disUART+0xaa>
     7ee:	11 30       	cpi	r17, 0x01	; 1
			// ìíê° ë³ê²½ëìì ëë§ ì¶ë ¥
			switch(currentState_A) {
     7f0:	69 f0       	breq	.+26     	; 0x80c <Presenter_disUART+0x94>
     7f2:	40 f0       	brcs	.+16     	; 0x804 <Presenter_disUART+0x8c>
     7f4:	12 30       	cpi	r17, 0x02	; 2
     7f6:	71 f0       	breq	.+28     	; 0x814 <Presenter_disUART+0x9c>
     7f8:	13 30       	cpi	r17, 0x03	; 3
     7fa:	79 f4       	brne	.+30     	; 0x81a <Presenter_disUART+0xa2>
				case Auto_OFF :
				printf("FanOff\n");
     7fc:	8f ea       	ldi	r24, 0xAF	; 175
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	7b d6       	rcall	.+3318   	; 0x14f8 <puts>
				break;
     802:	0b c0       	rjmp	.+22     	; 0x81a <Presenter_disUART+0xa2>
				
				case Auto_FanPower1 :
				printf("FanPower1\n");
     804:	86 eb       	ldi	r24, 0xB6	; 182
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	77 d6       	rcall	.+3310   	; 0x14f8 <puts>
				break;
     80a:	07 c0       	rjmp	.+14     	; 0x81a <Presenter_disUART+0xa2>
				
				case  Auto_FanPower2:
				printf("FanPower2\n");
     80c:	80 ec       	ldi	r24, 0xC0	; 192
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	73 d6       	rcall	.+3302   	; 0x14f8 <puts>
     812:	03 c0       	rjmp	.+6      	; 0x81a <Presenter_disUART+0xa2>
				break;
     814:	8a ec       	ldi	r24, 0xCA	; 202
				
				case Auto_FanPower3 :
				printf("FanPower3\n");
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	6f d6       	rcall	.+3294   	; 0x14f8 <puts>
     81a:	d0 93 d5 01 	sts	0x01D5, r29	; 0x8001d5 <__data_end+0x1>
				break;
			}
			// ìíê° ë³ê²½ë ê²½ì°ìë§ ì´ì  ìíë¥¼ ê°±ì 
			previousState = currentState_A;
     81e:	c0 93 d4 01 	sts	0x01D4, r28	; 0x8001d4 <__data_end>
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
		}
	
	
	}
	
}
     826:	1f 91       	pop	r17
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <Fan_Auto_Modechange>:
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17

//ìëëª¨ë ìíë³ê²½
void Fan_Auto_Modechange()
{
	static uint32_t prevTime = 0;
	uint8_t AutoState = Model_getAutoStateData();
     832:	18 de       	rcall	.-976    	; 0x464 <Model_getAutoStateData>
	switch(AutoState)
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	09 f4       	brne	.+2      	; 0x83a <Fan_Auto_Modechange+0xc>
     838:	55 c0       	rjmp	.+170    	; 0x8e4 <Fan_Auto_Modechange+0xb6>
     83a:	68 f1       	brcs	.+90     	; 0x896 <Fan_Auto_Modechange+0x68>
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	09 f4       	brne	.+2      	; 0x842 <Fan_Auto_Modechange+0x14>
     840:	77 c0       	rjmp	.+238    	; 0x930 <Fan_Auto_Modechange+0x102>
     842:	83 30       	cpi	r24, 0x03	; 3
     844:	09 f0       	breq	.+2      	; 0x848 <Fan_Auto_Modechange+0x1a>
     846:	99 c0       	rjmp	.+306    	; 0x97a <Fan_Auto_Modechange+0x14c>
	{
		case Auto_OFF :
		if(timeTick - prevTime >= 50)
     848:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <timeTick>
     84c:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <timeTick+0x1>
     850:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <timeTick+0x2>
     854:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <timeTick+0x3>
     858:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <prevTime.2203>
     85c:	50 91 df 01 	lds	r21, 0x01DF	; 0x8001df <prevTime.2203+0x1>
     860:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <prevTime.2203+0x2>
     864:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <prevTime.2203+0x3>
     868:	8c 01       	movw	r16, r24
     86a:	9d 01       	movw	r18, r26
     86c:	04 1b       	sub	r16, r20
     86e:	15 0b       	sbc	r17, r21
     870:	26 0b       	sbc	r18, r22
     872:	37 0b       	sbc	r19, r23
     874:	02 33       	cpi	r16, 0x32	; 50
     876:	11 05       	cpc	r17, r1
     878:	21 05       	cpc	r18, r1
     87a:	31 05       	cpc	r19, r1
     87c:	08 f4       	brcc	.+2      	; 0x880 <Fan_Auto_Modechange+0x52>
     87e:	7d c0       	rjmp	.+250    	; 0x97a <Fan_Auto_Modechange+0x14c>
		{
			prevTime = timeTick;
     880:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <prevTime.2203>
     884:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <prevTime.2203+0x1>
     888:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <prevTime.2203+0x2>
     88c:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <prevTime.2203+0x3>
			Model_setAutoStateData(Auto_FanPower1);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	eb dd       	rcall	.-1066   	; 0x46a <Model_setAutoStateData>
     894:	72 c0       	rjmp	.+228    	; 0x97a <Fan_Auto_Modechange+0x14c>
		}
		break;
		case Auto_FanPower1 :
		if(timeTick - prevTime >= 50)
     896:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <timeTick>
     89a:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <timeTick+0x1>
     89e:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <timeTick+0x2>
     8a2:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <timeTick+0x3>
     8a6:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <prevTime.2203>
     8aa:	50 91 df 01 	lds	r21, 0x01DF	; 0x8001df <prevTime.2203+0x1>
     8ae:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <prevTime.2203+0x2>
     8b2:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <prevTime.2203+0x3>
     8b6:	8c 01       	movw	r16, r24
     8b8:	9d 01       	movw	r18, r26
     8ba:	04 1b       	sub	r16, r20
     8bc:	15 0b       	sbc	r17, r21
     8be:	26 0b       	sbc	r18, r22
     8c0:	37 0b       	sbc	r19, r23
     8c2:	02 33       	cpi	r16, 0x32	; 50
     8c4:	11 05       	cpc	r17, r1
     8c6:	21 05       	cpc	r18, r1
     8c8:	31 05       	cpc	r19, r1
     8ca:	08 f4       	brcc	.+2      	; 0x8ce <Fan_Auto_Modechange+0xa0>
     8cc:	56 c0       	rjmp	.+172    	; 0x97a <Fan_Auto_Modechange+0x14c>
		{
			prevTime = timeTick;
     8ce:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <prevTime.2203>
     8d2:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <prevTime.2203+0x1>
     8d6:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <prevTime.2203+0x2>
     8da:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <prevTime.2203+0x3>
			Model_setAutoStateData(Auto_FanPower2);
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	c4 dd       	rcall	.-1144   	; 0x46a <Model_setAutoStateData>
     8e2:	4b c0       	rjmp	.+150    	; 0x97a <Fan_Auto_Modechange+0x14c>
		}
		break;
		case  Auto_FanPower2:
		if(timeTick - prevTime >= 50)
     8e4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <timeTick>
     8e8:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <timeTick+0x1>
     8ec:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <timeTick+0x2>
     8f0:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <timeTick+0x3>
     8f4:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <prevTime.2203>
     8f8:	50 91 df 01 	lds	r21, 0x01DF	; 0x8001df <prevTime.2203+0x1>
     8fc:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <prevTime.2203+0x2>
     900:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <prevTime.2203+0x3>
     904:	8c 01       	movw	r16, r24
     906:	9d 01       	movw	r18, r26
     908:	04 1b       	sub	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	26 0b       	sbc	r18, r22
     90e:	37 0b       	sbc	r19, r23
     910:	02 33       	cpi	r16, 0x32	; 50
     912:	11 05       	cpc	r17, r1
     914:	21 05       	cpc	r18, r1
     916:	31 05       	cpc	r19, r1
     918:	80 f1       	brcs	.+96     	; 0x97a <Fan_Auto_Modechange+0x14c>
		{
			prevTime = timeTick;
     91a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <prevTime.2203>
     91e:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <prevTime.2203+0x1>
     922:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <prevTime.2203+0x2>
     926:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <prevTime.2203+0x3>
			Model_setAutoStateData(Auto_FanPower3);
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	9e dd       	rcall	.-1220   	; 0x46a <Model_setAutoStateData>
     92e:	25 c0       	rjmp	.+74     	; 0x97a <Fan_Auto_Modechange+0x14c>
		}
		break;
		case Auto_FanPower3 :
		if(timeTick - prevTime >= 50)
     930:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <timeTick>
     934:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <timeTick+0x1>
     938:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <timeTick+0x2>
     93c:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <timeTick+0x3>
     940:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <prevTime.2203>
     944:	50 91 df 01 	lds	r21, 0x01DF	; 0x8001df <prevTime.2203+0x1>
     948:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <prevTime.2203+0x2>
     94c:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <prevTime.2203+0x3>
     950:	8c 01       	movw	r16, r24
     952:	9d 01       	movw	r18, r26
     954:	04 1b       	sub	r16, r20
     956:	15 0b       	sbc	r17, r21
     958:	26 0b       	sbc	r18, r22
     95a:	37 0b       	sbc	r19, r23
     95c:	02 33       	cpi	r16, 0x32	; 50
     95e:	11 05       	cpc	r17, r1
     960:	21 05       	cpc	r18, r1
     962:	31 05       	cpc	r19, r1
     964:	50 f0       	brcs	.+20     	; 0x97a <Fan_Auto_Modechange+0x14c>
		{
			prevTime = timeTick;
     966:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <prevTime.2203>
     96a:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <prevTime.2203+0x1>
     96e:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <prevTime.2203+0x2>
     972:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <prevTime.2203+0x3>
			Model_setAutoStateData(Auto_OFF);
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	78 dd       	rcall	.-1296   	; 0x46a <Model_setAutoStateData>
		}
		break;
	}
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <Auto_excute>:
uint32_t timeTick = 0;

//ìëëª¨ë
void Auto_excute()
{
	uint8_t ModeState = Model_getModeStateData();
     980:	83 dd       	rcall	.-1274   	; 0x488 <Model_getModeStateData>
	if(ModeState == AUTO)
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	d1 f4       	brne	.+52     	; 0x9ba <Auto_excute+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     986:	8f e9       	ldi	r24, 0x9F	; 159
     988:	9f e0       	ldi	r25, 0x0F	; 15
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <Auto_excute+0xa>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <Auto_excute+0x10>
     990:	00 00       	nop
	{
	_delay_ms(1);
	timeTick++;
     992:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <timeTick>
     996:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <timeTick+0x1>
     99a:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <timeTick+0x2>
     99e:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <timeTick+0x3>
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	a1 1d       	adc	r26, r1
     9a6:	b1 1d       	adc	r27, r1
     9a8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <timeTick>
     9ac:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <timeTick+0x1>
     9b0:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <timeTick+0x2>
     9b4:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <timeTick+0x3>
	Fan_Auto_Modechange();
     9b8:	3a cf       	rjmp	.-396    	; 0x82e <Fan_Auto_Modechange>
     9ba:	08 95       	ret

000009bc <FNDData_init>:
}

uint32_t getMillisec()
{
	return F_millisec;
}
     9bc:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <F_millisec>
     9c0:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <F_millisec+0x1>
     9c4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <F_millisec+0x2>
     9c8:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <F_millisec+0x3>
     9cc:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <F_sec>
     9d0:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <F_min>
     9d4:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <F_hour>
     9d8:	08 95       	ret

000009da <setFNDData>:
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	00 93 e9 01 	sts	0x01E9, r16	; 0x8001e9 <F_millisec>
     9e2:	10 93 ea 01 	sts	0x01EA, r17	; 0x8001ea <F_millisec+0x1>
     9e6:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <F_millisec+0x2>
     9ea:	30 93 ec 01 	sts	0x01EC, r19	; 0x8001ec <F_millisec+0x3>
     9ee:	40 93 e8 01 	sts	0x01E8, r20	; 0x8001e8 <F_sec>
     9f2:	60 93 e7 01 	sts	0x01E7, r22	; 0x8001e7 <F_min>
     9f6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <F_hour>
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	08 95       	ret

00000a00 <decmillisec>:



void decmillisec()
{
	uint8_t TimerFlag = Model_getTimerFlagData();
     a00:	49 dd       	rcall	.-1390   	; 0x494 <Model_getTimerFlagData>
	
	if(TimerFlag == 0) return;
     a02:	88 23       	and	r24, r24
     a04:	09 f4       	brne	.+2      	; 0xa08 <decmillisec+0x8>
     a06:	7b c0       	rjmp	.+246    	; 0xafe <decmillisec+0xfe>
	if((F_millisec == 0)&&(F_sec == 0)&&(F_min == 0)&&(F_hour == 0)) return;
     a08:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <F_millisec>
     a0c:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <F_millisec+0x1>
     a10:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <F_millisec+0x2>
     a14:	b0 91 ec 01 	lds	r27, 0x01EC	; 0x8001ec <F_millisec+0x3>
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	a1 05       	cpc	r26, r1
     a1c:	b1 05       	cpc	r27, r1
     a1e:	69 f4       	brne	.+26     	; 0xa3a <decmillisec+0x3a>
     a20:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <F_sec>
     a24:	21 11       	cpse	r18, r1
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <decmillisec+0x3a>
     a28:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <F_min>
     a2c:	21 11       	cpse	r18, r1
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <decmillisec+0x3a>
     a30:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <F_hour>
     a34:	22 23       	and	r18, r18
     a36:	09 f4       	brne	.+2      	; 0xa3a <decmillisec+0x3a>
     a38:	62 c0       	rjmp	.+196    	; 0xafe <decmillisec+0xfe>
	if(F_millisec == 0) F_millisec = 999;
     a3a:	00 97       	sbiw	r24, 0x00	; 0
     a3c:	a1 05       	cpc	r26, r1
     a3e:	b1 05       	cpc	r27, r1
     a40:	69 f4       	brne	.+26     	; 0xa5c <decmillisec+0x5c>
     a42:	87 ee       	ldi	r24, 0xE7	; 231
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	a0 e0       	ldi	r26, 0x00	; 0
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <F_millisec>
     a4e:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <F_millisec+0x1>
     a52:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <F_millisec+0x2>
     a56:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <F_millisec+0x3>
     a5a:	0b c0       	rjmp	.+22     	; 0xa72 <decmillisec+0x72>
	else F_millisec = (F_millisec - 1);
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	a1 09       	sbc	r26, r1
     a60:	b1 09       	sbc	r27, r1
     a62:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <F_millisec>
     a66:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <F_millisec+0x1>
     a6a:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <F_millisec+0x2>
     a6e:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <F_millisec+0x3>
	if(F_millisec < 500) FND_colonON();
     a72:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <F_millisec>
     a76:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <F_millisec+0x1>
     a7a:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <F_millisec+0x2>
     a7e:	b0 91 ec 01 	lds	r27, 0x01EC	; 0x8001ec <F_millisec+0x3>
     a82:	84 3f       	cpi	r24, 0xF4	; 244
     a84:	91 40       	sbci	r25, 0x01	; 1
     a86:	a1 05       	cpc	r26, r1
     a88:	b1 05       	cpc	r27, r1
     a8a:	10 f4       	brcc	.+4      	; 0xa90 <decmillisec+0x90>
     a8c:	5e d2       	rcall	.+1212   	; 0xf4a <FND_colonON>
	else FND_colonoff();
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <decmillisec+0x92>
     a90:	60 d2       	rcall	.+1216   	; 0xf52 <FND_colonoff>
	if(F_millisec != 999) return;
     a92:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <F_millisec>
     a96:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <F_millisec+0x1>
     a9a:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <F_millisec+0x2>
     a9e:	b0 91 ec 01 	lds	r27, 0x01EC	; 0x8001ec <F_millisec+0x3>
     aa2:	87 3e       	cpi	r24, 0xE7	; 231
     aa4:	93 40       	sbci	r25, 0x03	; 3
     aa6:	a1 05       	cpc	r26, r1
     aa8:	b1 05       	cpc	r27, r1
     aaa:	49 f5       	brne	.+82     	; 0xafe <decmillisec+0xfe>

	if (F_sec == 0) F_sec = 59;
     aac:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <F_sec>
     ab0:	81 11       	cpse	r24, r1
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <decmillisec+0xbc>
     ab4:	8b e3       	ldi	r24, 0x3B	; 59
     ab6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <F_sec>
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <decmillisec+0xc2>
	else F_sec = (F_sec - 1);
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <F_sec>
	if (F_sec != 59) return;
     ac2:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <F_sec>
     ac6:	8b 33       	cpi	r24, 0x3B	; 59
     ac8:	d1 f4       	brne	.+52     	; 0xafe <decmillisec+0xfe>
	
	if (F_min == 0) F_min = 59;
     aca:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <F_min>
     ace:	81 11       	cpse	r24, r1
     ad0:	04 c0       	rjmp	.+8      	; 0xada <decmillisec+0xda>
     ad2:	8b e3       	ldi	r24, 0x3B	; 59
     ad4:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <F_min>
     ad8:	03 c0       	rjmp	.+6      	; 0xae0 <decmillisec+0xe0>
	else F_min = (F_min - 1);
     ada:	81 50       	subi	r24, 0x01	; 1
     adc:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <F_min>
	if (F_min != 59) return;
     ae0:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <F_min>
     ae4:	8b 33       	cpi	r24, 0x3B	; 59
     ae6:	59 f4       	brne	.+22     	; 0xafe <decmillisec+0xfe>
	
	if (F_hour == 0) F_hour = 23;
     ae8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <F_hour>
     aec:	81 11       	cpse	r24, r1
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <decmillisec+0xf8>
     af0:	87 e1       	ldi	r24, 0x17	; 23
     af2:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <F_hour>
     af6:	08 95       	ret
	else F_hour = (F_hour - 1);
     af8:	81 50       	subi	r24, 0x01	; 1
     afa:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <F_hour>
     afe:	08 95       	ret

00000b00 <Digital_Fan_Execute_Stop>:
}


void Digital_Fan_Execute_Stop()
{
	if((F_millisec == 0)&&(F_sec == 0)&&(F_min == 0)&&(F_hour == 0))
     b00:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <F_millisec>
     b04:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <F_millisec+0x1>
     b08:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <F_millisec+0x2>
     b0c:	b0 91 ec 01 	lds	r27, 0x01EC	; 0x8001ec <F_millisec+0x3>
     b10:	89 2b       	or	r24, r25
     b12:	8a 2b       	or	r24, r26
     b14:	8b 2b       	or	r24, r27
     b16:	89 f4       	brne	.+34     	; 0xb3a <Digital_Fan_Execute_Stop+0x3a>
     b18:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <F_sec>
     b1c:	81 11       	cpse	r24, r1
     b1e:	0d c0       	rjmp	.+26     	; 0xb3a <Digital_Fan_Execute_Stop+0x3a>
     b20:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <F_min>
     b24:	81 11       	cpse	r24, r1
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <Digital_Fan_Execute_Stop+0x3a>
     b28:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <F_hour>
     b2c:	81 11       	cpse	r24, r1
     b2e:	05 c0       	rjmp	.+10     	; 0xb3a <Digital_Fan_Execute_Stop+0x3a>
	{
		Fan_off();
     b30:	f0 d1       	rcall	.+992    	; 0xf12 <Fan_off>
		Model_setTimerFlagData(0);
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	b2 dc       	rcall	.-1692   	; 0x49a <Model_setTimerFlagData>
		Model_setLCDTimerFlagData(0);
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	9e cc       	rjmp	.-1732   	; 0x476 <Model_setLCDTimerFlagData>
     b3a:	08 95       	ret

00000b3c <FNDDec_Run>:
     b3c:	0f 93       	push	r16
	}
}

void FNDDec_Run()
{
     b3e:	1f 93       	push	r17
	Presenter_disFNDData(F_hour, F_min, F_sec, F_millisec);
     b40:	00 91 e9 01 	lds	r16, 0x01E9	; 0x8001e9 <F_millisec>
     b44:	10 91 ea 01 	lds	r17, 0x01EA	; 0x8001ea <F_millisec+0x1>
     b48:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <F_millisec+0x2>
     b4c:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <F_millisec+0x3>
     b50:	40 91 e8 01 	lds	r20, 0x01E8	; 0x8001e8 <F_sec>
     b54:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <F_min>
     b58:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <F_hour>
     b5c:	76 dd       	rcall	.-1300   	; 0x64a <Presenter_disFNDData>
	Presenter_soundBuzzer();
     b5e:	82 dd       	rcall	.-1276   	; 0x664 <Presenter_soundBuzzer>
	Presenter_runFan();
     b60:	c6 dd       	rcall	.-1140   	; 0x6ee <Presenter_runFan>
     b62:	0a de       	rcall	.-1004   	; 0x778 <Presenter_disUART>
	Presenter_disUART();
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <LCDtime_init>:
static uint8_t L_min;
static uint8_t L_hour;

void LCDtime_init()
{
	L_millisec = 0;
     b6a:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <L_millisec>
     b6e:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <L_millisec+0x1>
     b72:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <L_millisec+0x2>
     b76:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <L_millisec+0x3>
	L_sec = 0;
     b7a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <L_sec>
	L_min = 0;
     b7e:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <L_min>
	L_hour = 0;
     b82:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <L_hour>
     b86:	08 95       	ret

00000b88 <IncMilisec>:
}



void IncMilisec()
{
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
	uint8_t autoState = Model_getAutoStateData();
     b8c:	6b dc       	rcall	.-1834   	; 0x464 <Model_getAutoStateData>
     b8e:	c8 2f       	mov	r28, r24
	uint8_t ManualState = Model_getManualStateData();
     b90:	75 dc       	rcall	.-1814   	; 0x47c <Model_getManualStateData>
     b92:	d8 2f       	mov	r29, r24
	uint8_t LCDTimerFlag = Model_getLCDTimerFlagData();
     b94:	6d dc       	rcall	.-1830   	; 0x470 <Model_getLCDTimerFlagData>
     b96:	c3 30       	cpi	r28, 0x03	; 3
	
	if((autoState != Auto_OFF) && (LCDTimerFlag == 1)) 
     b98:	09 f4       	brne	.+2      	; 0xb9c <IncMilisec+0x14>
     b9a:	43 c0       	rjmp	.+134    	; 0xc22 <IncMilisec+0x9a>
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	09 f0       	breq	.+2      	; 0xba2 <IncMilisec+0x1a>
     ba0:	40 c0       	rjmp	.+128    	; 0xc22 <IncMilisec+0x9a>
     ba2:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <L_millisec>
	{
		L_millisec = (L_millisec + 1) % 1000;
     ba6:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <L_millisec+0x1>
     baa:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <L_millisec+0x2>
     bae:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <L_millisec+0x3>
     bb2:	bc 01       	movw	r22, r24
     bb4:	cd 01       	movw	r24, r26
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	8f 4f       	sbci	r24, 0xFF	; 255
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	28 ee       	ldi	r18, 0xE8	; 232
     bc0:	33 e0       	ldi	r19, 0x03	; 3
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	2e d4       	rcall	.+2140   	; 0x1424 <__udivmodsi4>
     bc8:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <L_millisec>
     bcc:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <L_millisec+0x1>
     bd0:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <L_millisec+0x2>
     bd4:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <L_millisec+0x3>
     bd8:	67 2b       	or	r22, r23
		if(L_millisec) return; // ifë 0ì´ ìëëë True -> return, 0ì¼ëë false -> ë¤ì íì ì¤í
     bda:	68 2b       	or	r22, r24
     bdc:	69 2b       	or	r22, r25
     bde:	09 f0       	breq	.+2      	; 0xbe2 <IncMilisec+0x5a>
     be0:	64 c0       	rjmp	.+200    	; 0xcaa <IncMilisec+0x122>
     be2:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <L_sec>
		
		L_sec = (L_sec + 1) %60;
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	6c e3       	ldi	r22, 0x3C	; 60
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	07 d4       	rcall	.+2062   	; 0x13fe <__divmodhi4>
     bf0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <L_sec>
     bf4:	81 11       	cpse	r24, r1
		if(L_sec) return;
     bf6:	59 c0       	rjmp	.+178    	; 0xcaa <IncMilisec+0x122>
     bf8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <L_min>
		
		L_min = (L_min + 1) %60;
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	6c e3       	ldi	r22, 0x3C	; 60
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	fc d3       	rcall	.+2040   	; 0x13fe <__divmodhi4>
     c06:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <L_min>
     c0a:	81 11       	cpse	r24, r1
		if(L_min) return;
     c0c:	4e c0       	rjmp	.+156    	; 0xcaa <IncMilisec+0x122>
     c0e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <L_hour>
		
		L_hour = (L_hour + 1 ) %24;
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	68 e1       	ldi	r22, 0x18	; 24
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	f1 d3       	rcall	.+2018   	; 0x13fe <__divmodhi4>
     c1c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <L_hour>
     c20:	44 c0       	rjmp	.+136    	; 0xcaa <IncMilisec+0x122>
     c22:	d3 30       	cpi	r29, 0x03	; 3
	}
	
	else if((ManualState != Manual_OFF) && (LCDTimerFlag == 1))
     c24:	09 f4       	brne	.+2      	; 0xc28 <IncMilisec+0xa0>
     c26:	41 c0       	rjmp	.+130    	; 0xcaa <IncMilisec+0x122>
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <IncMilisec+0xa6>
     c2c:	3e c0       	rjmp	.+124    	; 0xcaa <IncMilisec+0x122>
     c2e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <L_millisec>
	{
		L_millisec = (L_millisec + 1) % 1000;
     c32:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <L_millisec+0x1>
     c36:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <L_millisec+0x2>
     c3a:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <L_millisec+0x3>
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	6f 5f       	subi	r22, 0xFF	; 255
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	8f 4f       	sbci	r24, 0xFF	; 255
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	28 ee       	ldi	r18, 0xE8	; 232
     c4c:	33 e0       	ldi	r19, 0x03	; 3
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	e8 d3       	rcall	.+2000   	; 0x1424 <__udivmodsi4>
     c54:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <L_millisec>
     c58:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <L_millisec+0x1>
     c5c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <L_millisec+0x2>
     c60:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <L_millisec+0x3>
     c64:	67 2b       	or	r22, r23
		if(L_millisec) return; // ifë 0ì´ ìëëë True -> return, 0ì¼ëë false -> ë¤ì íì ì¤í
     c66:	68 2b       	or	r22, r24
     c68:	69 2b       	or	r22, r25
     c6a:	f9 f4       	brne	.+62     	; 0xcaa <IncMilisec+0x122>
		
		L_sec = (L_sec + 1) %60;
     c6c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <L_sec>
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	6c e3       	ldi	r22, 0x3C	; 60
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	c2 d3       	rcall	.+1924   	; 0x13fe <__divmodhi4>
     c7a:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <L_sec>
		if(L_sec) return;
     c7e:	81 11       	cpse	r24, r1
     c80:	14 c0       	rjmp	.+40     	; 0xcaa <IncMilisec+0x122>
		
		L_min = (L_min + 1) %60;
     c82:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <L_min>
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	6c e3       	ldi	r22, 0x3C	; 60
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	b7 d3       	rcall	.+1902   	; 0x13fe <__divmodhi4>
     c90:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <L_min>
		if(L_min) return;
     c94:	81 11       	cpse	r24, r1
     c96:	09 c0       	rjmp	.+18     	; 0xcaa <IncMilisec+0x122>
		
		L_hour = (L_hour + 1 ) %24;
     c98:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <L_hour>
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	68 e1       	ldi	r22, 0x18	; 24
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	ac d3       	rcall	.+1880   	; 0x13fe <__divmodhi4>
     ca6:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <L_hour>
     caa:	df 91       	pop	r29
	}
}
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <INC_LCD_run>:
     cb0:	0f 93       	push	r16

void INC_LCD_run()
{
     cb2:	1f 93       	push	r17
	Presenter_disLCDData(L_hour, L_min, L_sec, L_millisec);
     cb4:	00 91 f0 01 	lds	r16, 0x01F0	; 0x8001f0 <L_millisec>
     cb8:	10 91 f1 01 	lds	r17, 0x01F1	; 0x8001f1 <L_millisec+0x1>
     cbc:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <L_millisec+0x2>
     cc0:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <L_millisec+0x3>
     cc4:	40 91 ef 01 	lds	r20, 0x01EF	; 0x8001ef <L_sec>
     cc8:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <L_min>
     ccc:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <L_hour>
     cd0:	f9 db       	rcall	.-2062   	; 0x4c4 <Presenter_disLCDData>
	Presenter_soundBuzzer();
     cd2:	c8 dc       	rcall	.-1648   	; 0x664 <Presenter_soundBuzzer>
	Presenter_runFan();
     cd4:	0c dd       	rcall	.-1512   	; 0x6ee <Presenter_runFan>
     cd6:	50 dd       	rcall	.-1376   	; 0x778 <Presenter_disUART>
	Presenter_disUART();
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	08 95       	ret

00000cde <Button_init>:
     cde:	fc 01       	movw	r30, r24
     ce0:	71 83       	std	Z+1, r23	; 0x01
     ce2:	60 83       	st	Z, r22
     ce4:	53 83       	std	Z+3, r21	; 0x03
     ce6:	42 83       	std	Z+2, r20	; 0x02
     ce8:	24 83       	std	Z+4, r18	; 0x04
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	85 83       	std	Z+5, r24	; 0x05
     cee:	fb 01       	movw	r30, r22
     cf0:	30 81       	ld	r19, Z
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <Button_init+0x1e>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	2a 95       	dec	r18
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <Button_init+0x1a>
     d00:	80 95       	com	r24
     d02:	83 23       	and	r24, r19
     d04:	80 83       	st	Z, r24
     d06:	08 95       	ret

00000d08 <Button_GetState>:
     d08:	fc 01       	movw	r30, r24
     d0a:	a2 81       	ldd	r26, Z+2	; 0x02
     d0c:	b3 81       	ldd	r27, Z+3	; 0x03
     d0e:	8c 91       	ld	r24, X
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	04 80       	ldd	r0, Z+4	; 0x04
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <Button_GetState+0x14>
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <Button_GetState+0x10>
     d20:	28 23       	and	r18, r24
     d22:	59 f4       	brne	.+22     	; 0xd3a <Button_GetState+0x32>
     d24:	85 81       	ldd	r24, Z+5	; 0x05
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	41 f4       	brne	.+16     	; 0xd3a <Button_GetState+0x32>
     d2a:	af e3       	ldi	r26, 0x3F	; 63
     d2c:	bc e9       	ldi	r27, 0x9C	; 156
     d2e:	11 97       	sbiw	r26, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <Button_GetState+0x26>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <Button_GetState+0x2c>
     d34:	00 00       	nop
     d36:	15 82       	std	Z+5, r1	; 0x05
     d38:	08 95       	ret
     d3a:	22 23       	and	r18, r18
     d3c:	69 f0       	breq	.+26     	; 0xd58 <Button_GetState+0x50>
     d3e:	85 81       	ldd	r24, Z+5	; 0x05
     d40:	81 11       	cpse	r24, r1
     d42:	0c c0       	rjmp	.+24     	; 0xd5c <Button_GetState+0x54>
     d44:	8f e3       	ldi	r24, 0x3F	; 63
     d46:	9c e9       	ldi	r25, 0x9C	; 156
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <Button_GetState+0x40>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <Button_GetState+0x46>
     d4e:	00 00       	nop
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	85 83       	std	Z+5, r24	; 0x05
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	08 95       	ret
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	08 95       	ret
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret

00000d60 <Buzzer_init>:
     d60:	87 b3       	in	r24, 0x17	; 23
     d62:	80 62       	ori	r24, 0x20	; 32
     d64:	87 bb       	out	0x17, r24	; 23
     d66:	8e b5       	in	r24, 0x2e	; 46
     d68:	88 61       	ori	r24, 0x18	; 24
     d6a:	8e bd       	out	0x2e, r24	; 46
     d6c:	8f b5       	in	r24, 0x2f	; 47
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	8f bd       	out	0x2f, r24	; 47
     d72:	8e b5       	in	r24, 0x2e	; 46
     d74:	83 60       	ori	r24, 0x03	; 3
     d76:	8e bd       	out	0x2e, r24	; 46
     d78:	08 95       	ret

00000d7a <Buzzer_makeHerz>:
     d7a:	81 3a       	cpi	r24, 0xA1	; 161
     d7c:	2f e0       	ldi	r18, 0x0F	; 15
     d7e:	92 07       	cpc	r25, r18
     d80:	20 f4       	brcc	.+8      	; 0xd8a <Buzzer_makeHerz+0x10>
     d82:	84 36       	cpi	r24, 0x64	; 100
     d84:	91 05       	cpc	r25, r1
     d86:	20 f0       	brcs	.+8      	; 0xd90 <Buzzer_makeHerz+0x16>
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <Buzzer_makeHerz+0x1a>
     d8a:	80 ea       	ldi	r24, 0xA0	; 160
     d8c:	9f e0       	ldi	r25, 0x0F	; 15
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <Buzzer_makeHerz+0x1a>
     d90:	84 e6       	ldi	r24, 0x64	; 100
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9c 01       	movw	r18, r24
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	60 e9       	ldi	r22, 0x90	; 144
     d9c:	70 ed       	ldi	r23, 0xD0	; 208
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	62 d3       	rcall	.+1732   	; 0x1468 <__divmodsi4>
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	31 09       	sbc	r19, r1
     da8:	37 bd       	out	0x27, r19	; 39
     daa:	26 bd       	out	0x26, r18	; 38
     dac:	86 b5       	in	r24, 0x26	; 38
     dae:	97 b5       	in	r25, 0x27	; 39
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	9b bd       	out	0x2b, r25	; 43
     db6:	8a bd       	out	0x2a, r24	; 42
     db8:	08 95       	ret

00000dba <Buzzer_soundON>:
     dba:	8f b5       	in	r24, 0x2f	; 47
     dbc:	80 68       	ori	r24, 0x80	; 128
     dbe:	8f bd       	out	0x2f, r24	; 47
     dc0:	08 95       	ret

00000dc2 <Buzzer_soundOff>:
     dc2:	8f b5       	in	r24, 0x2f	; 47
     dc4:	8f 77       	andi	r24, 0x7F	; 127
     dc6:	8f bd       	out	0x2f, r24	; 47
     dc8:	08 95       	ret

00000dca <Buzzer_powerOnSound>:
     dca:	f7 df       	rcall	.-18     	; 0xdba <Buzzer_soundON>
     dcc:	86 e1       	ldi	r24, 0x16	; 22
     dce:	94 e0       	ldi	r25, 0x04	; 4
     dd0:	d4 df       	rcall	.-88     	; 0xd7a <Buzzer_makeHerz>
     dd2:	2f ef       	ldi	r18, 0xFF	; 255
     dd4:	81 ee       	ldi	r24, 0xE1	; 225
     dd6:	94 e0       	ldi	r25, 0x04	; 4
     dd8:	21 50       	subi	r18, 0x01	; 1
     dda:	80 40       	sbci	r24, 0x00	; 0
     ddc:	90 40       	sbci	r25, 0x00	; 0
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <Buzzer_powerOnSound+0xe>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <Buzzer_powerOnSound+0x18>
     de2:	00 00       	nop
     de4:	1d bc       	out	0x2d, r1	; 45
     de6:	1c bc       	out	0x2c, r1	; 44
     de8:	86 e2       	ldi	r24, 0x26	; 38
     dea:	95 e0       	ldi	r25, 0x05	; 5
     dec:	c6 df       	rcall	.-116    	; 0xd7a <Buzzer_makeHerz>
     dee:	2f ef       	ldi	r18, 0xFF	; 255
     df0:	81 ee       	ldi	r24, 0xE1	; 225
     df2:	94 e0       	ldi	r25, 0x04	; 4
     df4:	21 50       	subi	r18, 0x01	; 1
     df6:	80 40       	sbci	r24, 0x00	; 0
     df8:	90 40       	sbci	r25, 0x00	; 0
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <Buzzer_powerOnSound+0x2a>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <Buzzer_powerOnSound+0x34>
     dfe:	00 00       	nop
     e00:	1d bc       	out	0x2d, r1	; 45
     e02:	1c bc       	out	0x2c, r1	; 44
     e04:	80 e2       	ldi	r24, 0x20	; 32
     e06:	96 e0       	ldi	r25, 0x06	; 6
     e08:	b8 df       	rcall	.-144    	; 0xd7a <Buzzer_makeHerz>
     e0a:	2f ef       	ldi	r18, 0xFF	; 255
     e0c:	81 ee       	ldi	r24, 0xE1	; 225
     e0e:	94 e0       	ldi	r25, 0x04	; 4
     e10:	21 50       	subi	r18, 0x01	; 1
     e12:	80 40       	sbci	r24, 0x00	; 0
     e14:	90 40       	sbci	r25, 0x00	; 0
     e16:	e1 f7       	brne	.-8      	; 0xe10 <Buzzer_powerOnSound+0x46>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <Buzzer_powerOnSound+0x50>
     e1a:	00 00       	nop
     e1c:	1d bc       	out	0x2d, r1	; 45
     e1e:	1c bc       	out	0x2c, r1	; 44
     e20:	8d e2       	ldi	r24, 0x2D	; 45
     e22:	98 e0       	ldi	r25, 0x08	; 8
     e24:	aa df       	rcall	.-172    	; 0xd7a <Buzzer_makeHerz>
     e26:	2f ef       	ldi	r18, 0xFF	; 255
     e28:	81 ee       	ldi	r24, 0xE1	; 225
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	21 50       	subi	r18, 0x01	; 1
     e2e:	80 40       	sbci	r24, 0x00	; 0
     e30:	90 40       	sbci	r25, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <Buzzer_powerOnSound+0x62>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <Buzzer_powerOnSound+0x6c>
     e36:	00 00       	nop
     e38:	1d bc       	out	0x2d, r1	; 45
     e3a:	1c bc       	out	0x2c, r1	; 44
     e3c:	c2 cf       	rjmp	.-124    	; 0xdc2 <Buzzer_soundOff>
     e3e:	08 95       	ret

00000e40 <Buzzer_powerOFFSound>:
     e40:	bc df       	rcall	.-136    	; 0xdba <Buzzer_soundON>
     e42:	8d e2       	ldi	r24, 0x2D	; 45
     e44:	98 e0       	ldi	r25, 0x08	; 8
     e46:	99 df       	rcall	.-206    	; 0xd7a <Buzzer_makeHerz>
     e48:	2f ef       	ldi	r18, 0xFF	; 255
     e4a:	81 ee       	ldi	r24, 0xE1	; 225
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	21 50       	subi	r18, 0x01	; 1
     e50:	80 40       	sbci	r24, 0x00	; 0
     e52:	90 40       	sbci	r25, 0x00	; 0
     e54:	e1 f7       	brne	.-8      	; 0xe4e <Buzzer_powerOFFSound+0xe>
     e56:	00 c0       	rjmp	.+0      	; 0xe58 <Buzzer_powerOFFSound+0x18>
     e58:	00 00       	nop
     e5a:	1d bc       	out	0x2d, r1	; 45
     e5c:	1c bc       	out	0x2c, r1	; 44
     e5e:	80 e2       	ldi	r24, 0x20	; 32
     e60:	96 e0       	ldi	r25, 0x06	; 6
     e62:	8b df       	rcall	.-234    	; 0xd7a <Buzzer_makeHerz>
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	81 ee       	ldi	r24, 0xE1	; 225
     e68:	94 e0       	ldi	r25, 0x04	; 4
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <Buzzer_powerOFFSound+0x2a>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <Buzzer_powerOFFSound+0x34>
     e74:	00 00       	nop
     e76:	1d bc       	out	0x2d, r1	; 45
     e78:	1c bc       	out	0x2c, r1	; 44
     e7a:	86 e2       	ldi	r24, 0x26	; 38
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	7d df       	rcall	.-262    	; 0xd7a <Buzzer_makeHerz>
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	81 ee       	ldi	r24, 0xE1	; 225
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	80 40       	sbci	r24, 0x00	; 0
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <Buzzer_powerOFFSound+0x46>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <Buzzer_powerOFFSound+0x50>
     e90:	00 00       	nop
     e92:	1d bc       	out	0x2d, r1	; 45
     e94:	1c bc       	out	0x2c, r1	; 44
     e96:	86 e1       	ldi	r24, 0x16	; 22
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	6f df       	rcall	.-290    	; 0xd7a <Buzzer_makeHerz>
     e9c:	2f ef       	ldi	r18, 0xFF	; 255
     e9e:	81 ee       	ldi	r24, 0xE1	; 225
     ea0:	94 e0       	ldi	r25, 0x04	; 4
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	80 40       	sbci	r24, 0x00	; 0
     ea6:	90 40       	sbci	r25, 0x00	; 0
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <Buzzer_powerOFFSound+0x62>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <Buzzer_powerOFFSound+0x6c>
     eac:	00 00       	nop
     eae:	1d bc       	out	0x2d, r1	; 45
     eb0:	1c bc       	out	0x2c, r1	; 44
     eb2:	87 cf       	rjmp	.-242    	; 0xdc2 <Buzzer_soundOff>
     eb4:	08 95       	ret

00000eb6 <Fan_init>:
     eb6:	82 b1       	in	r24, 0x02	; 2
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	82 b9       	out	0x02, r24	; 2
     ebc:	ea e8       	ldi	r30, 0x8A	; 138
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	88 61       	ori	r24, 0x18	; 24
     ec4:	80 83       	st	Z, r24
     ec6:	ab e8       	ldi	r26, 0x8B	; 139
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	8c 91       	ld	r24, X
     ecc:	82 60       	ori	r24, 0x02	; 2
     ece:	8c 93       	st	X, r24
     ed0:	80 81       	ld	r24, Z
     ed2:	83 60       	ori	r24, 0x03	; 3
     ed4:	80 83       	st	Z, r24
     ed6:	08 95       	ret

00000ed8 <Fan_makeHerz>:
     ed8:	9c 01       	movw	r18, r24
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	60 e9       	ldi	r22, 0x90	; 144
     ee0:	70 ed       	ldi	r23, 0xD0	; 208
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	c0 d2       	rcall	.+1408   	; 0x1468 <__divmodsi4>
     ee8:	21 50       	subi	r18, 0x01	; 1
     eea:	31 09       	sbc	r19, r1
     eec:	e0 e8       	ldi	r30, 0x80	; 128
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	31 83       	std	Z+1, r19	; 0x01
     ef2:	20 83       	st	Z, r18
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	96 95       	lsr	r25
     efa:	87 95       	ror	r24
     efc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     f00:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     f04:	08 95       	ret

00000f06 <Fan_On>:
     f06:	eb e8       	ldi	r30, 0x8B	; 139
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 68       	ori	r24, 0x80	; 128
     f0e:	80 83       	st	Z, r24
     f10:	08 95       	ret

00000f12 <Fan_off>:
     f12:	eb e8       	ldi	r30, 0x8B	; 139
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 73       	andi	r24, 0x3F	; 63
     f1a:	80 83       	st	Z, r24
     f1c:	08 95       	ret

00000f1e <Fan_Power1>:
     f1e:	f3 df       	rcall	.-26     	; 0xf06 <Fan_On>
     f20:	88 ee       	ldi	r24, 0xE8	; 232
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	d9 cf       	rjmp	.-78     	; 0xed8 <Fan_makeHerz>
     f26:	08 95       	ret

00000f28 <Fan_Power2>:
     f28:	ee df       	rcall	.-36     	; 0xf06 <Fan_On>
     f2a:	80 ed       	ldi	r24, 0xD0	; 208
     f2c:	97 e0       	ldi	r25, 0x07	; 7
     f2e:	d4 cf       	rjmp	.-88     	; 0xed8 <Fan_makeHerz>
     f30:	08 95       	ret

00000f32 <Fan_Power3>:
     f32:	e9 df       	rcall	.-46     	; 0xf06 <Fan_On>
     f34:	88 eb       	ldi	r24, 0xB8	; 184
     f36:	9b e0       	ldi	r25, 0x0B	; 11
     f38:	cf cf       	rjmp	.-98     	; 0xed8 <Fan_makeHerz>
     f3a:	08 95       	ret

00000f3c <FND_init>:
     f3c:	82 b1       	in	r24, 0x02	; 2
     f3e:	80 6f       	ori	r24, 0xF0	; 240
     f40:	82 b9       	out	0x02, r24	; 2
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     f48:	08 95       	ret

00000f4a <FND_colonON>:
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <fndColonFlag>
     f50:	08 95       	ret

00000f52 <FND_colonoff>:
     f52:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <fndColonFlag>
     f56:	08 95       	ret

00000f58 <FND_dispNum>:
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	2b 97       	sbiw	r28, 0x0b	; 11
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	8c 01       	movw	r16, r24
     f72:	8b e0       	ldi	r24, 0x0B	; 11
     f74:	ee e0       	ldi	r30, 0x0E	; 14
     f76:	f1 e0       	ldi	r31, 0x01	; 1
     f78:	de 01       	movw	r26, r28
     f7a:	11 96       	adiw	r26, 0x01	; 1
     f7c:	01 90       	ld	r0, Z+
     f7e:	0d 92       	st	X+, r0
     f80:	8a 95       	dec	r24
     f82:	e1 f7       	brne	.-8      	; 0xf7c <FND_dispNum+0x24>
     f84:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <fndDigitState.1748>
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	65 e0       	ldi	r22, 0x05	; 5
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	36 d2       	rcall	.+1132   	; 0x13fe <__divmodhi4>
     f92:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <fndDigitState.1748>
     f96:	83 b1       	in	r24, 0x03	; 3
     f98:	80 6f       	ori	r24, 0xF0	; 240
     f9a:	83 b9       	out	0x03, r24	; 3
     f9c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <fndDigitState.1748>
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <FND_dispNum+0x4e>
     fa4:	74 c0       	rjmp	.+232    	; 0x108e <__DATA_REGION_LENGTH__+0x8e>
     fa6:	30 f4       	brcc	.+12     	; 0xfb4 <FND_dispNum+0x5c>
     fa8:	88 23       	and	r24, r24
     faa:	59 f0       	breq	.+22     	; 0xfc2 <FND_dispNum+0x6a>
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <FND_dispNum+0x5a>
     fb0:	3e c0       	rjmp	.+124    	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
     fb2:	cd c0       	rjmp	.+410    	; 0x114e <__stack+0x4f>
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	09 f4       	brne	.+2      	; 0xfba <FND_dispNum+0x62>
     fb8:	98 c0       	rjmp	.+304    	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
     fba:	84 30       	cpi	r24, 0x04	; 4
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <FND_dispNum+0x68>
     fbe:	ba c0       	rjmp	.+372    	; 0x1134 <__stack+0x35>
     fc0:	c6 c0       	rjmp	.+396    	; 0x114e <__stack+0x4f>
     fc2:	98 01       	movw	r18, r16
     fc4:	36 95       	lsr	r19
     fc6:	27 95       	ror	r18
     fc8:	36 95       	lsr	r19
     fca:	27 95       	ror	r18
     fcc:	36 95       	lsr	r19
     fce:	27 95       	ror	r18
     fd0:	a5 ec       	ldi	r26, 0xC5	; 197
     fd2:	b0 e2       	ldi	r27, 0x20	; 32
     fd4:	65 d2       	rcall	.+1226   	; 0x14a0 <__umulhisi3>
     fd6:	ac 01       	movw	r20, r24
     fd8:	52 95       	swap	r21
     fda:	42 95       	swap	r20
     fdc:	4f 70       	andi	r20, 0x0F	; 15
     fde:	45 27       	eor	r20, r21
     fe0:	5f 70       	andi	r21, 0x0F	; 15
     fe2:	45 27       	eor	r20, r21
     fe4:	9a 01       	movw	r18, r20
     fe6:	ad ec       	ldi	r26, 0xCD	; 205
     fe8:	bc ec       	ldi	r27, 0xCC	; 204
     fea:	5a d2       	rcall	.+1204   	; 0x14a0 <__umulhisi3>
     fec:	96 95       	lsr	r25
     fee:	87 95       	ror	r24
     ff0:	96 95       	lsr	r25
     ff2:	87 95       	ror	r24
     ff4:	96 95       	lsr	r25
     ff6:	87 95       	ror	r24
     ff8:	9c 01       	movw	r18, r24
     ffa:	22 0f       	add	r18, r18
     ffc:	33 1f       	adc	r19, r19
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	9a 01       	movw	r18, r20
    1010:	28 1b       	sub	r18, r24
    1012:	39 0b       	sbc	r19, r25
    1014:	e1 e0       	ldi	r30, 0x01	; 1
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	ec 0f       	add	r30, r28
    101a:	fd 1f       	adc	r31, r29
    101c:	e2 0f       	add	r30, r18
    101e:	f3 1f       	adc	r31, r19
    1020:	80 81       	ld	r24, Z
    1022:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1026:	83 b1       	in	r24, 0x03	; 3
    1028:	8f 7e       	andi	r24, 0xEF	; 239
    102a:	83 b9       	out	0x03, r24	; 3
    102c:	90 c0       	rjmp	.+288    	; 0x114e <__stack+0x4f>
    102e:	98 01       	movw	r18, r16
    1030:	36 95       	lsr	r19
    1032:	27 95       	ror	r18
    1034:	36 95       	lsr	r19
    1036:	27 95       	ror	r18
    1038:	ab e7       	ldi	r26, 0x7B	; 123
    103a:	b4 e1       	ldi	r27, 0x14	; 20
    103c:	31 d2       	rcall	.+1122   	; 0x14a0 <__umulhisi3>
    103e:	ac 01       	movw	r20, r24
    1040:	56 95       	lsr	r21
    1042:	47 95       	ror	r20
    1044:	9a 01       	movw	r18, r20
    1046:	ad ec       	ldi	r26, 0xCD	; 205
    1048:	bc ec       	ldi	r27, 0xCC	; 204
    104a:	2a d2       	rcall	.+1108   	; 0x14a0 <__umulhisi3>
    104c:	96 95       	lsr	r25
    104e:	87 95       	ror	r24
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	96 95       	lsr	r25
    1056:	87 95       	ror	r24
    1058:	9c 01       	movw	r18, r24
    105a:	22 0f       	add	r18, r18
    105c:	33 1f       	adc	r19, r19
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	9a 01       	movw	r18, r20
    1070:	28 1b       	sub	r18, r24
    1072:	39 0b       	sbc	r19, r25
    1074:	e1 e0       	ldi	r30, 0x01	; 1
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	ec 0f       	add	r30, r28
    107a:	fd 1f       	adc	r31, r29
    107c:	e2 0f       	add	r30, r18
    107e:	f3 1f       	adc	r31, r19
    1080:	80 81       	ld	r24, Z
    1082:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1086:	83 b1       	in	r24, 0x03	; 3
    1088:	8f 7d       	andi	r24, 0xDF	; 223
    108a:	83 b9       	out	0x03, r24	; 3
    108c:	60 c0       	rjmp	.+192    	; 0x114e <__stack+0x4f>
    108e:	98 01       	movw	r18, r16
    1090:	ad ec       	ldi	r26, 0xCD	; 205
    1092:	bc ec       	ldi	r27, 0xCC	; 204
    1094:	05 d2       	rcall	.+1034   	; 0x14a0 <__umulhisi3>
    1096:	ac 01       	movw	r20, r24
    1098:	56 95       	lsr	r21
    109a:	47 95       	ror	r20
    109c:	56 95       	lsr	r21
    109e:	47 95       	ror	r20
    10a0:	56 95       	lsr	r21
    10a2:	47 95       	ror	r20
    10a4:	9a 01       	movw	r18, r20
    10a6:	fc d1       	rcall	.+1016   	; 0x14a0 <__umulhisi3>
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	96 95       	lsr	r25
    10b2:	87 95       	ror	r24
    10b4:	9c 01       	movw	r18, r24
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	9a 01       	movw	r18, r20
    10cc:	28 1b       	sub	r18, r24
    10ce:	39 0b       	sbc	r19, r25
    10d0:	e1 e0       	ldi	r30, 0x01	; 1
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	ec 0f       	add	r30, r28
    10d6:	fd 1f       	adc	r31, r29
    10d8:	e2 0f       	add	r30, r18
    10da:	f3 1f       	adc	r31, r19
    10dc:	80 81       	ld	r24, Z
    10de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e2:	83 b1       	in	r24, 0x03	; 3
    10e4:	8f 7b       	andi	r24, 0xBF	; 191
    10e6:	83 b9       	out	0x03, r24	; 3
    10e8:	32 c0       	rjmp	.+100    	; 0x114e <__stack+0x4f>
    10ea:	98 01       	movw	r18, r16
    10ec:	ad ec       	ldi	r26, 0xCD	; 205
    10ee:	bc ec       	ldi	r27, 0xCC	; 204
    10f0:	d7 d1       	rcall	.+942    	; 0x14a0 <__umulhisi3>
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	96 95       	lsr	r25
    10f8:	87 95       	ror	r24
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
    10fe:	9c 01       	movw	r18, r24
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	98 01       	movw	r18, r16
    1116:	28 1b       	sub	r18, r24
    1118:	39 0b       	sbc	r19, r25
    111a:	e1 e0       	ldi	r30, 0x01	; 1
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	ec 0f       	add	r30, r28
    1120:	fd 1f       	adc	r31, r29
    1122:	e2 0f       	add	r30, r18
    1124:	f3 1f       	adc	r31, r19
    1126:	80 81       	ld	r24, Z
    1128:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    112c:	83 b1       	in	r24, 0x03	; 3
    112e:	8f 77       	andi	r24, 0x7F	; 127
    1130:	83 b9       	out	0x03, r24	; 3
    1132:	0d c0       	rjmp	.+26     	; 0x114e <__stack+0x4f>
    1134:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <fndColonFlag>
    1138:	88 23       	and	r24, r24
    113a:	21 f0       	breq	.+8      	; 0x1144 <__stack+0x45>
    113c:	8b 85       	ldd	r24, Y+11	; 0x0b
    113e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <__stack+0x49>
    1144:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1148:	83 b1       	in	r24, 0x03	; 3
    114a:	8f 7d       	andi	r24, 0xDF	; 223
    114c:	83 b9       	out	0x03, r24	; 3
    114e:	2b 96       	adiw	r28, 0x0b	; 11
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	08 95       	ret

00001164 <FND_setFndData>:
    1164:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <fndData+0x1>
    1168:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <fndData>
    116c:	08 95       	ret

0000116e <FND_ISR_Process>:
    116e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <fndData>
    1172:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <fndData+0x1>
    1176:	f0 ce       	rjmp	.-544    	; 0xf58 <FND_dispNum>
    1178:	08 95       	ret

0000117a <LCD_sendToI2C>:
	LCD_CONTROL_PORT = data;
}

void Gpio_writeData(uint8_t data)
{
	LCD_DATA_PORT = data;
    117a:	e4 c0       	rjmp	.+456    	; 0x1344 <I2C_txByte>
    117c:	08 95       	ret

0000117e <LCD_backLightOn>:
    117e:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <lcdControlData>
    1182:	68 60       	ori	r22, 0x08	; 8
    1184:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <lcdControlData>
    1188:	8e e4       	ldi	r24, 0x4E	; 78
    118a:	f7 cf       	rjmp	.-18     	; 0x117a <LCD_sendToI2C>
    118c:	08 95       	ret

0000118e <LCD_cmdMode>:
}

void LCD_cmdMode()
{
	//RS : 0
	lcdControlData &= ~(1<<LCD_RS); // instruction Register (RS : 0)
    118e:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <lcdControlData>
    1192:	6e 7f       	andi	r22, 0xFE	; 254
    1194:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <lcdControlData>
	//Gpio_writeControlData(lcdControlData);
	LCD_sendToI2C(LCD_SLA_W, lcdControlData);
    1198:	8e e4       	ldi	r24, 0x4E	; 78
    119a:	ef cf       	rjmp	.-34     	; 0x117a <LCD_sendToI2C>
    119c:	08 95       	ret

0000119e <LCD_charMode>:
}

void LCD_charMode()
{
	lcdControlData |= (1<<LCD_RS); // Data Register (RS : 1)
    119e:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <lcdControlData>
    11a2:	61 60       	ori	r22, 0x01	; 1
    11a4:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <lcdControlData>
	//Gpio_writeControlData(lcdControlData);
	LCD_sendToI2C(LCD_SLA_W, lcdControlData);
    11a8:	8e e4       	ldi	r24, 0x4E	; 78
    11aa:	e7 cf       	rjmp	.-50     	; 0x117a <LCD_sendToI2C>
    11ac:	08 95       	ret

000011ae <LCD_writeMode>:
}

void LCD_writeMode()
{
	lcdControlData &= ~(1<<LCD_RW); // Write Mode (RW : 0)
    11ae:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <lcdControlData>
    11b2:	6d 7f       	andi	r22, 0xFD	; 253
    11b4:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <lcdControlData>
	//Gpio_writeControlData(lcdControlData);
	LCD_sendToI2C(LCD_SLA_W, lcdControlData);
    11b8:	8e e4       	ldi	r24, 0x4E	; 78
    11ba:	df cf       	rjmp	.-66     	; 0x117a <LCD_sendToI2C>
    11bc:	08 95       	ret

000011be <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	lcdControlData |= (1<<LCD_E); // Enable High Signal (E : 1)
    11be:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <lcdControlData>
    11c2:	64 60       	ori	r22, 0x04	; 4
    11c4:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <lcdControlData>
	//Gpio_writeControlData(lcdControlData);
	LCD_sendToI2C(LCD_SLA_W, lcdControlData);
    11c8:	8e e4       	ldi	r24, 0x4E	; 78
    11ca:	d7 df       	rcall	.-82     	; 0x117a <LCD_sendToI2C>
    11cc:	8f e9       	ldi	r24, 0x9F	; 159
    11ce:	9f e0       	ldi	r25, 0x0F	; 15
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <LCD_enableHigh+0x12>
    11d4:	00 c0       	rjmp	.+0      	; 0x11d6 <LCD_enableHigh+0x18>
    11d6:	00 00       	nop
    11d8:	08 95       	ret

000011da <LCD_enableLow>:
	_delay_ms(1);
}

void LCD_enableLow()
{
	lcdControlData &= ~(1<<LCD_E); // Enable Low Signal (E : 0)
    11da:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <lcdControlData>
    11de:	6b 7f       	andi	r22, 0xFB	; 251
    11e0:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <lcdControlData>
	//Gpio_writeControlData(lcdControlData);
	LCD_sendToI2C(LCD_SLA_W, lcdControlData);
    11e4:	8e e4       	ldi	r24, 0x4E	; 78
    11e6:	c9 df       	rcall	.-110    	; 0x117a <LCD_sendToI2C>
    11e8:	8f e9       	ldi	r24, 0x9F	; 159
    11ea:	9f e0       	ldi	r25, 0x0F	; 15
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <LCD_enableLow+0x12>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <LCD_enableLow+0x18>
    11f2:	00 00       	nop
    11f4:	08 95       	ret

000011f6 <LCD_writeNibble>:
	data <<= 4;
	LCD_writeNibble(data);
}

void LCD_writeNibble(uint8_t data)
{
    11f6:	cf 93       	push	r28
    11f8:	c8 2f       	mov	r28, r24
	LCD_enableHigh();
    11fa:	e1 df       	rcall	.-62     	; 0x11be <LCD_enableHigh>
	lcdControlData = (lcdControlData & 0x0f) | (data & 0xf0);
    11fc:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <lcdControlData>
    1200:	6f 70       	andi	r22, 0x0F	; 15
    1202:	c0 7f       	andi	r28, 0xF0	; 240
    1204:	6c 2b       	or	r22, r28
    1206:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <lcdControlData>
	LCD_sendToI2C(LCD_SLA_W, lcdControlData);
    120a:	8e e4       	ldi	r24, 0x4E	; 78
	LCD_enableLow();
    120c:	b6 df       	rcall	.-148    	; 0x117a <LCD_sendToI2C>
    120e:	e5 df       	rcall	.-54     	; 0x11da <LCD_enableLow>
}
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <LCD_writeByte>:
	LCD_sendToI2C(LCD_SLA_W, lcdControlData);
	_delay_ms(1);
}

void LCD_writeByte(uint8_t data)
{
    1214:	cf 93       	push	r28
    1216:	c8 2f       	mov	r28, r24
	//Gpio_writeData(data);
	LCD_writeNibble(data);
    1218:	ee df       	rcall	.-36     	; 0x11f6 <LCD_writeNibble>
	data <<= 4;
	LCD_writeNibble(data);
    121a:	8c 2f       	mov	r24, r28
    121c:	82 95       	swap	r24
    121e:	80 7f       	andi	r24, 0xF0	; 240
    1220:	ea df       	rcall	.-44     	; 0x11f6 <LCD_writeNibble>
}
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <LCD_writeCmdData>:
	LCD_enableLow();
}


void LCD_writeCmdData(uint8_t data)
{	// LCD control process
    1226:	cf 93       	push	r28
    1228:	c8 2f       	mov	r28, r24
	LCD_cmdMode();
    122a:	b1 df       	rcall	.-158    	; 0x118e <LCD_cmdMode>
	LCD_writeMode();
    122c:	c0 df       	rcall	.-128    	; 0x11ae <LCD_writeMode>
	//LCD_enableHigh();
	LCD_writeByte(data);
    122e:	8c 2f       	mov	r24, r28
    1230:	f1 df       	rcall	.-30     	; 0x1214 <LCD_writeByte>
    1232:	cf 91       	pop	r28
	//LCD_enableLow();
}
    1234:	08 95       	ret

00001236 <I2C_LCD_init>:
    1236:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <lcdControlData>
// Enable bit : 0 or 1

void I2C_LCD_init()
{
	lcdControlData = 0;
	I2C_init();
    123a:	5b d0       	rcall	.+182    	; 0x12f2 <I2C_init>
    123c:	8f e5       	ldi	r24, 0x5F	; 95
    123e:	9a ee       	ldi	r25, 0xEA	; 234
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <I2C_LCD_init+0xa>
    1244:	00 c0       	rjmp	.+0      	; 0x1246 <I2C_LCD_init+0x10>
    1246:	00 00       	nop
	
	_delay_ms(15);
	LCD_writeNibble(0x30);
    1248:	80 e3       	ldi	r24, 0x30	; 48
    124a:	d5 df       	rcall	.-86     	; 0x11f6 <LCD_writeNibble>
    124c:	8f e1       	ldi	r24, 0x1F	; 31
    124e:	9e e4       	ldi	r25, 0x4E	; 78
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <I2C_LCD_init+0x1a>
    1254:	00 c0       	rjmp	.+0      	; 0x1256 <I2C_LCD_init+0x20>
	_delay_ms(5);
	LCD_writeNibble(0x30);
    1256:	00 00       	nop
    1258:	80 e3       	ldi	r24, 0x30	; 48
    125a:	cd df       	rcall	.-102    	; 0x11f6 <LCD_writeNibble>
    125c:	8f e9       	ldi	r24, 0x9F	; 159
    125e:	9f e0       	ldi	r25, 0x0F	; 15
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <I2C_LCD_init+0x2a>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <I2C_LCD_init+0x30>
	_delay_ms(1);
	LCD_writeNibble(0x30);
    1266:	00 00       	nop
    1268:	80 e3       	ldi	r24, 0x30	; 48
	LCD_writeNibble(0x20);
    126a:	c5 df       	rcall	.-118    	; 0x11f6 <LCD_writeNibble>
    126c:	80 e2       	ldi	r24, 0x20	; 32
	LCD_writeCmdData(LCD_4BIT_FUNCTION_SET);
    126e:	c3 df       	rcall	.-122    	; 0x11f6 <LCD_writeNibble>
    1270:	88 e2       	ldi	r24, 0x28	; 40
	LCD_writeCmdData(LCD_DISPLAY_OFF);
    1272:	d9 df       	rcall	.-78     	; 0x1226 <LCD_writeCmdData>
    1274:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);
    1276:	d7 df       	rcall	.-82     	; 0x1226 <LCD_writeCmdData>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	d5 df       	rcall	.-86     	; 0x1226 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);
    127c:	86 e0       	ldi	r24, 0x06	; 6
    127e:	d3 df       	rcall	.-90     	; 0x1226 <LCD_writeCmdData>
    1280:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_writeCmdData(LCD_DISPLAY_ON);
    1282:	d1 df       	rcall	.-94     	; 0x1226 <LCD_writeCmdData>
    1284:	7c cf       	rjmp	.-264    	; 0x117e <LCD_backLightOn>
    1286:	08 95       	ret

00001288 <LCD_writeCharData>:
	LCD_backLightOn();
    1288:	cf 93       	push	r28
    128a:	c8 2f       	mov	r28, r24
    128c:	88 df       	rcall	.-240    	; 0x119e <LCD_charMode>
}

void LCD_writeCharData(uint8_t data)
{	// LCD write process
	LCD_charMode();
	LCD_writeMode();
    128e:	8f df       	rcall	.-226    	; 0x11ae <LCD_writeMode>
	//LCD_enableHigh();
	LCD_writeByte(data);
    1290:	8c 2f       	mov	r24, r28
    1292:	c0 df       	rcall	.-128    	; 0x1214 <LCD_writeByte>
    1294:	cf 91       	pop	r28
	//LCD_enableLow();
}
    1296:	08 95       	ret

00001298 <LCD_writeString>:
    1298:	0f 93       	push	r16

void LCD_writeString(char *str)
{
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	8c 01       	movw	r16, r24
	for(int i=0; str[i]; i++)
    12a2:	c0 e0       	ldi	r28, 0x00	; 0
    12a4:	d0 e0       	ldi	r29, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <LCD_writeString+0x14>
	{
		LCD_writeCharData(str[i]);
    12a8:	ef df       	rcall	.-34     	; 0x1288 <LCD_writeCharData>
	//LCD_enableLow();
}

void LCD_writeString(char *str)
{
	for(int i=0; str[i]; i++)
    12aa:	21 96       	adiw	r28, 0x01	; 1
    12ac:	f8 01       	movw	r30, r16
    12ae:	ec 0f       	add	r30, r28
    12b0:	fd 1f       	adc	r31, r29
    12b2:	80 81       	ld	r24, Z
    12b4:	81 11       	cpse	r24, r1
    12b6:	f8 cf       	rjmp	.-16     	; 0x12a8 <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	08 95       	ret

000012c2 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col%=16;
    12c2:	6f 70       	andi	r22, 0x0F	; 15
	row%=2;
    12c4:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row) + col;
    12c6:	90 e4       	ldi	r25, 0x40	; 64
    12c8:	89 9f       	mul	r24, r25
    12ca:	60 0d       	add	r22, r0
    12cc:	11 24       	eor	r1, r1
    12ce:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
    12d0:	80 58       	subi	r24, 0x80	; 128
    12d2:	a9 cf       	rjmp	.-174    	; 0x1226 <LCD_writeCmdData>
    12d4:	08 95       	ret

000012d6 <LCD_writeStringXY>:
}

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ea 01       	movw	r28, r20
	LCD_gotoXY(row, col);
    12dc:	f2 df       	rcall	.-28     	; 0x12c2 <LCD_gotoXY>
	LCD_writeString(str);
    12de:	ce 01       	movw	r24, r28
    12e0:	db df       	rcall	.-74     	; 0x1298 <LCD_writeString>
}
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <main>:

//ë©ì¸ í¨ì
int main(void)
{
	//ì´ê¸°í
   APMain_init();
    12e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <APMain_init>
    while (1) 
    {
		//ì¤í
		APMain_execute();
    12ec:	0e 94 f6 00 	call	0x1ec	; 0x1ec <APMain_execute>
    12f0:	fd cf       	rjmp	.-6      	; 0x12ec <main+0x4>

000012f2 <I2C_init>:



void I2C_init()
{
	IC2_DDR |= (1<<IC2_SCL) | (1<<IC2_SDA);
    12f2:	81 b3       	in	r24, 0x11	; 17
    12f4:	83 60       	ori	r24, 0x03	; 3
    12f6:	81 bb       	out	0x11, r24	; 17
	TWBR = 72;		//100khz SCL
    12f8:	88 e4       	ldi	r24, 0x48	; 72
    12fa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	//TWBR = 32;		200khz SCL
	//TWBR = 12;		400khz SCL
	TWSR = 0;
    12fe:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1302:	08 95       	ret

00001304 <I2C_start>:
}

void I2C_start()
{
	//Send START condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1304:	84 ea       	ldi	r24, 0xA4	; 164
    1306:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	//Wait for TWINT flag set. This indicates that the START condition has been transmitted
	while (!(TWCR & (1<<TWINT)));
    130a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    130e:	88 23       	and	r24, r24
    1310:	e4 f7       	brge	.-8      	; 0x130a <I2C_start+0x6>
}
    1312:	08 95       	ret

00001314 <I2C_txDevAddr>:

void I2C_txDevAddr(uint8_t SLA_W)
{	//Load SLA_W into TWDR Register.
	TWDR = SLA_W;
    1314:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	// Clear  TWINT bit in TWCR to start transmission of address
	TWCR = (1<<TWINT) |(1<<TWEN);
    1318:	84 e8       	ldi	r24, 0x84	; 132
    131a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	// This indicates that the SLA+W has been transmitted, and ACK/NACK has been received
	while (!(TWCR & (1<<TWINT)))
    131e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1322:	88 23       	and	r24, r24
    1324:	e4 f7       	brge	.-8      	; 0x131e <I2C_txDevAddr+0xa>
	;
}
    1326:	08 95       	ret

00001328 <I2C_txData>:

void I2C_txData(uint8_t data)
{	// Load DATA into TWDR Register.
	TWDR = data;
    1328:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	// Clear TWINT bit in TWCR to start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
    132c:	84 e8       	ldi	r24, 0x84	; 132
    132e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	//Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK 	has been received
	while (!(TWCR & (1<<TWINT)));
    1332:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1336:	88 23       	and	r24, r24
    1338:	e4 f7       	brge	.-8      	; 0x1332 <I2C_txData+0xa>
}
    133a:	08 95       	ret

0000133c <I2C_stop>:

void I2C_stop()
{
	// Transmit STOP condition
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    133c:	84 e9       	ldi	r24, 0x94	; 148
    133e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1342:	08 95       	ret

00001344 <I2C_txByte>:
	//TWBR = 12;		400khz SCL
	TWSR = 0;
}

void I2C_txByte(uint8_t SLA_W, uint8_t data)
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	d8 2f       	mov	r29, r24
    134a:	c6 2f       	mov	r28, r22
	// 1. Start ì í¸ ì¡ì ,
	I2C_start();
    134c:	db df       	rcall	.-74     	; 0x1304 <I2C_start>
	// 2. Device address 7bit + write 1bit + ack 1bit
	I2C_txDevAddr(SLA_W);
    134e:	8d 2f       	mov	r24, r29
    1350:	e1 df       	rcall	.-62     	; 0x1314 <I2C_txDevAddr>
	// 3. Data  ì¡ì 
	I2C_txData(data);
    1352:	8c 2f       	mov	r24, r28
    1354:	e9 df       	rcall	.-46     	; 0x1328 <I2C_txData>
	// 4. Stop ì í¸ ì¡ì 
	I2C_stop();
    1356:	f2 df       	rcall	.-28     	; 0x133c <I2C_stop>
    1358:	df 91       	pop	r29
}
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <TIM0_init>:
    135e:	83 b7       	in	r24, 0x33	; 51
    1360:	85 60       	ori	r24, 0x05	; 5
    1362:	83 bf       	out	0x33, r24	; 51
    1364:	87 b7       	in	r24, 0x37	; 55
    1366:	81 60       	ori	r24, 0x01	; 1
    1368:	87 bf       	out	0x37, r24	; 55
    136a:	82 e8       	ldi	r24, 0x82	; 130
    136c:	82 bf       	out	0x32, r24	; 50
    136e:	08 95       	ret

00001370 <TIM2_init>:
    1370:	85 b5       	in	r24, 0x25	; 37
    1372:	83 60       	ori	r24, 0x03	; 3
    1374:	85 bd       	out	0x25, r24	; 37
    1376:	85 b5       	in	r24, 0x25	; 37
    1378:	88 60       	ori	r24, 0x08	; 8
    137a:	85 bd       	out	0x25, r24	; 37
    137c:	87 b7       	in	r24, 0x37	; 55
    137e:	80 68       	ori	r24, 0x80	; 128
    1380:	87 bf       	out	0x37, r24	; 55
    1382:	89 ef       	ldi	r24, 0xF9	; 249
    1384:	83 bd       	out	0x23, r24	; 35
    1386:	08 95       	ret

00001388 <UART0_init>:
    1388:	8a b1       	in	r24, 0x0a	; 10
    138a:	88 61       	ori	r24, 0x18	; 24
    138c:	8a b9       	out	0x0a, r24	; 10
    138e:	8a b1       	in	r24, 0x0a	; 10
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	8a b9       	out	0x0a, r24	; 10
    1394:	8b b1       	in	r24, 0x0b	; 11
    1396:	82 60       	ori	r24, 0x02	; 2
    1398:	8b b9       	out	0x0b, r24	; 11
    139a:	8f ec       	ldi	r24, 0xCF	; 207
    139c:	89 b9       	out	0x09, r24	; 9
    139e:	08 95       	ret

000013a0 <UART0_Transmit>:
    13a0:	5d 9b       	sbis	0x0b, 5	; 11
    13a2:	fe cf       	rjmp	.-4      	; 0x13a0 <UART0_Transmit>
    13a4:	8c b9       	out	0x0c, r24	; 12
    13a6:	08 95       	ret

000013a8 <UART0_readyRxFlag>:
    13a8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <uart0RxCFlag>
    13ac:	08 95       	ret

000013ae <UART0_clearRxFlag>:
    13ae:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <uart0RxCFlag>
    13b2:	08 95       	ret

000013b4 <UART0_setRxFlag>:
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <uart0RxCFlag>
    13ba:	08 95       	ret

000013bc <UART0_ISR_Process>:
    13bc:	9c b1       	in	r25, 0x0c	; 12
    13be:	9a 30       	cpi	r25, 0x0A	; 10
    13c0:	81 f4       	brne	.+32     	; 0x13e2 <UART0_ISR_Process+0x26>
    13c2:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <uart0Rxtail.1641>
    13c6:	ae 2f       	mov	r26, r30
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	a5 5c       	subi	r26, 0xC5	; 197
    13cc:	bd 4f       	sbci	r27, 0xFD	; 253
    13ce:	9c 93       	st	X, r25
    13d0:	ef 5f       	subi	r30, 0xFF	; 255
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	e5 5c       	subi	r30, 0xC5	; 197
    13d6:	fd 4f       	sbci	r31, 0xFD	; 253
    13d8:	10 82       	st	Z, r1
    13da:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <uart0Rxtail.1641>
    13de:	ea cf       	rjmp	.-44     	; 0x13b4 <UART0_setRxFlag>
    13e0:	08 95       	ret
    13e2:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <uart0Rxtail.1641>
    13e6:	e8 2f       	mov	r30, r24
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	e5 5c       	subi	r30, 0xC5	; 197
    13ec:	fd 4f       	sbci	r31, 0xFD	; 253
    13ee:	90 83       	st	Z, r25
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <uart0Rxtail.1641>
    13f6:	08 95       	ret

000013f8 <UART0_readRxBuff>:
    13f8:	8b e3       	ldi	r24, 0x3B	; 59
    13fa:	92 e0       	ldi	r25, 0x02	; 2
    13fc:	08 95       	ret

000013fe <__divmodhi4>:
    13fe:	97 fb       	bst	r25, 7
    1400:	07 2e       	mov	r0, r23
    1402:	16 f4       	brtc	.+4      	; 0x1408 <__divmodhi4+0xa>
    1404:	00 94       	com	r0
    1406:	06 d0       	rcall	.+12     	; 0x1414 <__divmodhi4_neg1>
    1408:	77 fd       	sbrc	r23, 7
    140a:	08 d0       	rcall	.+16     	; 0x141c <__divmodhi4_neg2>
    140c:	58 d0       	rcall	.+176    	; 0x14be <__udivmodhi4>
    140e:	07 fc       	sbrc	r0, 7
    1410:	05 d0       	rcall	.+10     	; 0x141c <__divmodhi4_neg2>
    1412:	3e f4       	brtc	.+14     	; 0x1422 <__divmodhi4_exit>

00001414 <__divmodhi4_neg1>:
    1414:	90 95       	com	r25
    1416:	81 95       	neg	r24
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	08 95       	ret

0000141c <__divmodhi4_neg2>:
    141c:	70 95       	com	r23
    141e:	61 95       	neg	r22
    1420:	7f 4f       	sbci	r23, 0xFF	; 255

00001422 <__divmodhi4_exit>:
    1422:	08 95       	ret

00001424 <__udivmodsi4>:
    1424:	a1 e2       	ldi	r26, 0x21	; 33
    1426:	1a 2e       	mov	r1, r26
    1428:	aa 1b       	sub	r26, r26
    142a:	bb 1b       	sub	r27, r27
    142c:	fd 01       	movw	r30, r26
    142e:	0d c0       	rjmp	.+26     	; 0x144a <__udivmodsi4_ep>

00001430 <__udivmodsi4_loop>:
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	ee 1f       	adc	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	a2 17       	cp	r26, r18
    143a:	b3 07       	cpc	r27, r19
    143c:	e4 07       	cpc	r30, r20
    143e:	f5 07       	cpc	r31, r21
    1440:	20 f0       	brcs	.+8      	; 0x144a <__udivmodsi4_ep>
    1442:	a2 1b       	sub	r26, r18
    1444:	b3 0b       	sbc	r27, r19
    1446:	e4 0b       	sbc	r30, r20
    1448:	f5 0b       	sbc	r31, r21

0000144a <__udivmodsi4_ep>:
    144a:	66 1f       	adc	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	88 1f       	adc	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	1a 94       	dec	r1
    1454:	69 f7       	brne	.-38     	; 0x1430 <__udivmodsi4_loop>
    1456:	60 95       	com	r22
    1458:	70 95       	com	r23
    145a:	80 95       	com	r24
    145c:	90 95       	com	r25
    145e:	9b 01       	movw	r18, r22
    1460:	ac 01       	movw	r20, r24
    1462:	bd 01       	movw	r22, r26
    1464:	cf 01       	movw	r24, r30
    1466:	08 95       	ret

00001468 <__divmodsi4>:
    1468:	05 2e       	mov	r0, r21
    146a:	97 fb       	bst	r25, 7
    146c:	16 f4       	brtc	.+4      	; 0x1472 <__divmodsi4+0xa>
    146e:	00 94       	com	r0
    1470:	0f d0       	rcall	.+30     	; 0x1490 <__negsi2>
    1472:	57 fd       	sbrc	r21, 7
    1474:	05 d0       	rcall	.+10     	; 0x1480 <__divmodsi4_neg2>
    1476:	d6 df       	rcall	.-84     	; 0x1424 <__udivmodsi4>
    1478:	07 fc       	sbrc	r0, 7
    147a:	02 d0       	rcall	.+4      	; 0x1480 <__divmodsi4_neg2>
    147c:	46 f4       	brtc	.+16     	; 0x148e <__divmodsi4_exit>
    147e:	08 c0       	rjmp	.+16     	; 0x1490 <__negsi2>

00001480 <__divmodsi4_neg2>:
    1480:	50 95       	com	r21
    1482:	40 95       	com	r20
    1484:	30 95       	com	r19
    1486:	21 95       	neg	r18
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	4f 4f       	sbci	r20, 0xFF	; 255
    148c:	5f 4f       	sbci	r21, 0xFF	; 255

0000148e <__divmodsi4_exit>:
    148e:	08 95       	ret

00001490 <__negsi2>:
    1490:	90 95       	com	r25
    1492:	80 95       	com	r24
    1494:	70 95       	com	r23
    1496:	61 95       	neg	r22
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	8f 4f       	sbci	r24, 0xFF	; 255
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	08 95       	ret

000014a0 <__umulhisi3>:
    14a0:	a2 9f       	mul	r26, r18
    14a2:	b0 01       	movw	r22, r0
    14a4:	b3 9f       	mul	r27, r19
    14a6:	c0 01       	movw	r24, r0
    14a8:	a3 9f       	mul	r26, r19
    14aa:	70 0d       	add	r23, r0
    14ac:	81 1d       	adc	r24, r1
    14ae:	11 24       	eor	r1, r1
    14b0:	91 1d       	adc	r25, r1
    14b2:	b2 9f       	mul	r27, r18
    14b4:	70 0d       	add	r23, r0
    14b6:	81 1d       	adc	r24, r1
    14b8:	11 24       	eor	r1, r1
    14ba:	91 1d       	adc	r25, r1
    14bc:	08 95       	ret

000014be <__udivmodhi4>:
    14be:	aa 1b       	sub	r26, r26
    14c0:	bb 1b       	sub	r27, r27
    14c2:	51 e1       	ldi	r21, 0x11	; 17
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <__udivmodhi4_ep>

000014c6 <__udivmodhi4_loop>:
    14c6:	aa 1f       	adc	r26, r26
    14c8:	bb 1f       	adc	r27, r27
    14ca:	a6 17       	cp	r26, r22
    14cc:	b7 07       	cpc	r27, r23
    14ce:	10 f0       	brcs	.+4      	; 0x14d4 <__udivmodhi4_ep>
    14d0:	a6 1b       	sub	r26, r22
    14d2:	b7 0b       	sbc	r27, r23

000014d4 <__udivmodhi4_ep>:
    14d4:	88 1f       	adc	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	5a 95       	dec	r21
    14da:	a9 f7       	brne	.-22     	; 0x14c6 <__udivmodhi4_loop>
    14dc:	80 95       	com	r24
    14de:	90 95       	com	r25
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	08 95       	ret

000014e6 <strcmp>:
    14e6:	fb 01       	movw	r30, r22
    14e8:	dc 01       	movw	r26, r24
    14ea:	8d 91       	ld	r24, X+
    14ec:	01 90       	ld	r0, Z+
    14ee:	80 19       	sub	r24, r0
    14f0:	01 10       	cpse	r0, r1
    14f2:	d9 f3       	breq	.-10     	; 0x14ea <strcmp+0x4>
    14f4:	99 0b       	sbc	r25, r25
    14f6:	08 95       	ret

000014f8 <puts>:
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <__iob+0x2>
    1504:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <__iob+0x3>
    1508:	23 81       	ldd	r18, Z+3	; 0x03
    150a:	21 ff       	sbrs	r18, 1
    150c:	1b c0       	rjmp	.+54     	; 0x1544 <puts+0x4c>
    150e:	8c 01       	movw	r16, r24
    1510:	d0 e0       	ldi	r29, 0x00	; 0
    1512:	c0 e0       	ldi	r28, 0x00	; 0
    1514:	f8 01       	movw	r30, r16
    1516:	81 91       	ld	r24, Z+
    1518:	8f 01       	movw	r16, r30
    151a:	60 91 a1 02 	lds	r22, 0x02A1	; 0x8002a1 <__iob+0x2>
    151e:	70 91 a2 02 	lds	r23, 0x02A2	; 0x8002a2 <__iob+0x3>
    1522:	db 01       	movw	r26, r22
    1524:	18 96       	adiw	r26, 0x08	; 8
    1526:	ed 91       	ld	r30, X+
    1528:	fc 91       	ld	r31, X
    152a:	19 97       	sbiw	r26, 0x09	; 9
    152c:	88 23       	and	r24, r24
    152e:	31 f0       	breq	.+12     	; 0x153c <puts+0x44>
    1530:	09 95       	icall
    1532:	89 2b       	or	r24, r25
    1534:	79 f3       	breq	.-34     	; 0x1514 <puts+0x1c>
    1536:	df ef       	ldi	r29, 0xFF	; 255
    1538:	cf ef       	ldi	r28, 0xFF	; 255
    153a:	ec cf       	rjmp	.-40     	; 0x1514 <puts+0x1c>
    153c:	8a e0       	ldi	r24, 0x0A	; 10
    153e:	09 95       	icall
    1540:	89 2b       	or	r24, r25
    1542:	19 f0       	breq	.+6      	; 0x154a <puts+0x52>
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	9f ef       	ldi	r25, 0xFF	; 255
    1548:	02 c0       	rjmp	.+4      	; 0x154e <puts+0x56>
    154a:	8d 2f       	mov	r24, r29
    154c:	9c 2f       	mov	r25, r28
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	08 95       	ret

00001558 <sprintf>:
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	2e 97       	sbiw	r28, 0x0e	; 14
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	0d 89       	ldd	r16, Y+21	; 0x15
    1572:	1e 89       	ldd	r17, Y+22	; 0x16
    1574:	86 e0       	ldi	r24, 0x06	; 6
    1576:	8c 83       	std	Y+4, r24	; 0x04
    1578:	1a 83       	std	Y+2, r17	; 0x02
    157a:	09 83       	std	Y+1, r16	; 0x01
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	9f e7       	ldi	r25, 0x7F	; 127
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	ae 01       	movw	r20, r28
    1586:	47 5e       	subi	r20, 0xE7	; 231
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	6f 89       	ldd	r22, Y+23	; 0x17
    158c:	78 8d       	ldd	r23, Y+24	; 0x18
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	10 d0       	rcall	.+32     	; 0x15b4 <vfprintf>
    1594:	ef 81       	ldd	r30, Y+7	; 0x07
    1596:	f8 85       	ldd	r31, Y+8	; 0x08
    1598:	e0 0f       	add	r30, r16
    159a:	f1 1f       	adc	r31, r17
    159c:	10 82       	st	Z, r1
    159e:	2e 96       	adiw	r28, 0x0e	; 14
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <vfprintf>:
    15b4:	2f 92       	push	r2
    15b6:	3f 92       	push	r3
    15b8:	4f 92       	push	r4
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	2b 97       	sbiw	r28, 0x0b	; 11
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	6c 01       	movw	r12, r24
    15ea:	7b 01       	movw	r14, r22
    15ec:	8a 01       	movw	r16, r20
    15ee:	fc 01       	movw	r30, r24
    15f0:	17 82       	std	Z+7, r1	; 0x07
    15f2:	16 82       	std	Z+6, r1	; 0x06
    15f4:	83 81       	ldd	r24, Z+3	; 0x03
    15f6:	81 ff       	sbrs	r24, 1
    15f8:	bf c1       	rjmp	.+894    	; 0x1978 <vfprintf+0x3c4>
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	3c 01       	movw	r6, r24
    1600:	f6 01       	movw	r30, r12
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	f7 01       	movw	r30, r14
    1606:	93 fd       	sbrc	r25, 3
    1608:	85 91       	lpm	r24, Z+
    160a:	93 ff       	sbrs	r25, 3
    160c:	81 91       	ld	r24, Z+
    160e:	7f 01       	movw	r14, r30
    1610:	88 23       	and	r24, r24
    1612:	09 f4       	brne	.+2      	; 0x1616 <vfprintf+0x62>
    1614:	ad c1       	rjmp	.+858    	; 0x1970 <vfprintf+0x3bc>
    1616:	85 32       	cpi	r24, 0x25	; 37
    1618:	39 f4       	brne	.+14     	; 0x1628 <vfprintf+0x74>
    161a:	93 fd       	sbrc	r25, 3
    161c:	85 91       	lpm	r24, Z+
    161e:	93 ff       	sbrs	r25, 3
    1620:	81 91       	ld	r24, Z+
    1622:	7f 01       	movw	r14, r30
    1624:	85 32       	cpi	r24, 0x25	; 37
    1626:	21 f4       	brne	.+8      	; 0x1630 <vfprintf+0x7c>
    1628:	b6 01       	movw	r22, r12
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	d6 d1       	rcall	.+940    	; 0x19da <fputc>
    162e:	e8 cf       	rjmp	.-48     	; 0x1600 <vfprintf+0x4c>
    1630:	91 2c       	mov	r9, r1
    1632:	21 2c       	mov	r2, r1
    1634:	31 2c       	mov	r3, r1
    1636:	ff e1       	ldi	r31, 0x1F	; 31
    1638:	f3 15       	cp	r31, r3
    163a:	d8 f0       	brcs	.+54     	; 0x1672 <vfprintf+0xbe>
    163c:	8b 32       	cpi	r24, 0x2B	; 43
    163e:	79 f0       	breq	.+30     	; 0x165e <vfprintf+0xaa>
    1640:	38 f4       	brcc	.+14     	; 0x1650 <vfprintf+0x9c>
    1642:	80 32       	cpi	r24, 0x20	; 32
    1644:	79 f0       	breq	.+30     	; 0x1664 <vfprintf+0xb0>
    1646:	83 32       	cpi	r24, 0x23	; 35
    1648:	a1 f4       	brne	.+40     	; 0x1672 <vfprintf+0xbe>
    164a:	23 2d       	mov	r18, r3
    164c:	20 61       	ori	r18, 0x10	; 16
    164e:	1d c0       	rjmp	.+58     	; 0x168a <vfprintf+0xd6>
    1650:	8d 32       	cpi	r24, 0x2D	; 45
    1652:	61 f0       	breq	.+24     	; 0x166c <vfprintf+0xb8>
    1654:	80 33       	cpi	r24, 0x30	; 48
    1656:	69 f4       	brne	.+26     	; 0x1672 <vfprintf+0xbe>
    1658:	23 2d       	mov	r18, r3
    165a:	21 60       	ori	r18, 0x01	; 1
    165c:	16 c0       	rjmp	.+44     	; 0x168a <vfprintf+0xd6>
    165e:	83 2d       	mov	r24, r3
    1660:	82 60       	ori	r24, 0x02	; 2
    1662:	38 2e       	mov	r3, r24
    1664:	e3 2d       	mov	r30, r3
    1666:	e4 60       	ori	r30, 0x04	; 4
    1668:	3e 2e       	mov	r3, r30
    166a:	2a c0       	rjmp	.+84     	; 0x16c0 <vfprintf+0x10c>
    166c:	f3 2d       	mov	r31, r3
    166e:	f8 60       	ori	r31, 0x08	; 8
    1670:	1d c0       	rjmp	.+58     	; 0x16ac <vfprintf+0xf8>
    1672:	37 fc       	sbrc	r3, 7
    1674:	2d c0       	rjmp	.+90     	; 0x16d0 <vfprintf+0x11c>
    1676:	20 ed       	ldi	r18, 0xD0	; 208
    1678:	28 0f       	add	r18, r24
    167a:	2a 30       	cpi	r18, 0x0A	; 10
    167c:	40 f0       	brcs	.+16     	; 0x168e <vfprintf+0xda>
    167e:	8e 32       	cpi	r24, 0x2E	; 46
    1680:	b9 f4       	brne	.+46     	; 0x16b0 <vfprintf+0xfc>
    1682:	36 fc       	sbrc	r3, 6
    1684:	75 c1       	rjmp	.+746    	; 0x1970 <vfprintf+0x3bc>
    1686:	23 2d       	mov	r18, r3
    1688:	20 64       	ori	r18, 0x40	; 64
    168a:	32 2e       	mov	r3, r18
    168c:	19 c0       	rjmp	.+50     	; 0x16c0 <vfprintf+0x10c>
    168e:	36 fe       	sbrs	r3, 6
    1690:	06 c0       	rjmp	.+12     	; 0x169e <vfprintf+0xea>
    1692:	8a e0       	ldi	r24, 0x0A	; 10
    1694:	98 9e       	mul	r9, r24
    1696:	20 0d       	add	r18, r0
    1698:	11 24       	eor	r1, r1
    169a:	92 2e       	mov	r9, r18
    169c:	11 c0       	rjmp	.+34     	; 0x16c0 <vfprintf+0x10c>
    169e:	ea e0       	ldi	r30, 0x0A	; 10
    16a0:	2e 9e       	mul	r2, r30
    16a2:	20 0d       	add	r18, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	22 2e       	mov	r2, r18
    16a8:	f3 2d       	mov	r31, r3
    16aa:	f0 62       	ori	r31, 0x20	; 32
    16ac:	3f 2e       	mov	r3, r31
    16ae:	08 c0       	rjmp	.+16     	; 0x16c0 <vfprintf+0x10c>
    16b0:	8c 36       	cpi	r24, 0x6C	; 108
    16b2:	21 f4       	brne	.+8      	; 0x16bc <vfprintf+0x108>
    16b4:	83 2d       	mov	r24, r3
    16b6:	80 68       	ori	r24, 0x80	; 128
    16b8:	38 2e       	mov	r3, r24
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <vfprintf+0x10c>
    16bc:	88 36       	cpi	r24, 0x68	; 104
    16be:	41 f4       	brne	.+16     	; 0x16d0 <vfprintf+0x11c>
    16c0:	f7 01       	movw	r30, r14
    16c2:	93 fd       	sbrc	r25, 3
    16c4:	85 91       	lpm	r24, Z+
    16c6:	93 ff       	sbrs	r25, 3
    16c8:	81 91       	ld	r24, Z+
    16ca:	7f 01       	movw	r14, r30
    16cc:	81 11       	cpse	r24, r1
    16ce:	b3 cf       	rjmp	.-154    	; 0x1636 <vfprintf+0x82>
    16d0:	98 2f       	mov	r25, r24
    16d2:	9f 7d       	andi	r25, 0xDF	; 223
    16d4:	95 54       	subi	r25, 0x45	; 69
    16d6:	93 30       	cpi	r25, 0x03	; 3
    16d8:	28 f4       	brcc	.+10     	; 0x16e4 <vfprintf+0x130>
    16da:	0c 5f       	subi	r16, 0xFC	; 252
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	9f e3       	ldi	r25, 0x3F	; 63
    16e0:	99 83       	std	Y+1, r25	; 0x01
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <vfprintf+0x14a>
    16e4:	83 36       	cpi	r24, 0x63	; 99
    16e6:	31 f0       	breq	.+12     	; 0x16f4 <vfprintf+0x140>
    16e8:	83 37       	cpi	r24, 0x73	; 115
    16ea:	71 f0       	breq	.+28     	; 0x1708 <vfprintf+0x154>
    16ec:	83 35       	cpi	r24, 0x53	; 83
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <vfprintf+0x13e>
    16f0:	55 c0       	rjmp	.+170    	; 0x179c <vfprintf+0x1e8>
    16f2:	20 c0       	rjmp	.+64     	; 0x1734 <vfprintf+0x180>
    16f4:	f8 01       	movw	r30, r16
    16f6:	80 81       	ld	r24, Z
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	0e 5f       	subi	r16, 0xFE	; 254
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	88 24       	eor	r8, r8
    1700:	83 94       	inc	r8
    1702:	91 2c       	mov	r9, r1
    1704:	53 01       	movw	r10, r6
    1706:	12 c0       	rjmp	.+36     	; 0x172c <vfprintf+0x178>
    1708:	28 01       	movw	r4, r16
    170a:	f2 e0       	ldi	r31, 0x02	; 2
    170c:	4f 0e       	add	r4, r31
    170e:	51 1c       	adc	r5, r1
    1710:	f8 01       	movw	r30, r16
    1712:	a0 80       	ld	r10, Z
    1714:	b1 80       	ldd	r11, Z+1	; 0x01
    1716:	36 fe       	sbrs	r3, 6
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <vfprintf+0x16c>
    171a:	69 2d       	mov	r22, r9
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <vfprintf+0x170>
    1720:	6f ef       	ldi	r22, 0xFF	; 255
    1722:	7f ef       	ldi	r23, 0xFF	; 255
    1724:	c5 01       	movw	r24, r10
    1726:	4e d1       	rcall	.+668    	; 0x19c4 <strnlen>
    1728:	4c 01       	movw	r8, r24
    172a:	82 01       	movw	r16, r4
    172c:	f3 2d       	mov	r31, r3
    172e:	ff 77       	andi	r31, 0x7F	; 127
    1730:	3f 2e       	mov	r3, r31
    1732:	15 c0       	rjmp	.+42     	; 0x175e <vfprintf+0x1aa>
    1734:	28 01       	movw	r4, r16
    1736:	22 e0       	ldi	r18, 0x02	; 2
    1738:	42 0e       	add	r4, r18
    173a:	51 1c       	adc	r5, r1
    173c:	f8 01       	movw	r30, r16
    173e:	a0 80       	ld	r10, Z
    1740:	b1 80       	ldd	r11, Z+1	; 0x01
    1742:	36 fe       	sbrs	r3, 6
    1744:	03 c0       	rjmp	.+6      	; 0x174c <vfprintf+0x198>
    1746:	69 2d       	mov	r22, r9
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <vfprintf+0x19c>
    174c:	6f ef       	ldi	r22, 0xFF	; 255
    174e:	7f ef       	ldi	r23, 0xFF	; 255
    1750:	c5 01       	movw	r24, r10
    1752:	2d d1       	rcall	.+602    	; 0x19ae <strnlen_P>
    1754:	4c 01       	movw	r8, r24
    1756:	f3 2d       	mov	r31, r3
    1758:	f0 68       	ori	r31, 0x80	; 128
    175a:	3f 2e       	mov	r3, r31
    175c:	82 01       	movw	r16, r4
    175e:	33 fc       	sbrc	r3, 3
    1760:	19 c0       	rjmp	.+50     	; 0x1794 <vfprintf+0x1e0>
    1762:	82 2d       	mov	r24, r2
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	88 16       	cp	r8, r24
    1768:	99 06       	cpc	r9, r25
    176a:	a0 f4       	brcc	.+40     	; 0x1794 <vfprintf+0x1e0>
    176c:	b6 01       	movw	r22, r12
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	33 d1       	rcall	.+614    	; 0x19da <fputc>
    1774:	2a 94       	dec	r2
    1776:	f5 cf       	rjmp	.-22     	; 0x1762 <vfprintf+0x1ae>
    1778:	f5 01       	movw	r30, r10
    177a:	37 fc       	sbrc	r3, 7
    177c:	85 91       	lpm	r24, Z+
    177e:	37 fe       	sbrs	r3, 7
    1780:	81 91       	ld	r24, Z+
    1782:	5f 01       	movw	r10, r30
    1784:	b6 01       	movw	r22, r12
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	28 d1       	rcall	.+592    	; 0x19da <fputc>
    178a:	21 10       	cpse	r2, r1
    178c:	2a 94       	dec	r2
    178e:	21 e0       	ldi	r18, 0x01	; 1
    1790:	82 1a       	sub	r8, r18
    1792:	91 08       	sbc	r9, r1
    1794:	81 14       	cp	r8, r1
    1796:	91 04       	cpc	r9, r1
    1798:	79 f7       	brne	.-34     	; 0x1778 <vfprintf+0x1c4>
    179a:	e1 c0       	rjmp	.+450    	; 0x195e <vfprintf+0x3aa>
    179c:	84 36       	cpi	r24, 0x64	; 100
    179e:	11 f0       	breq	.+4      	; 0x17a4 <vfprintf+0x1f0>
    17a0:	89 36       	cpi	r24, 0x69	; 105
    17a2:	39 f5       	brne	.+78     	; 0x17f2 <vfprintf+0x23e>
    17a4:	f8 01       	movw	r30, r16
    17a6:	37 fe       	sbrs	r3, 7
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <vfprintf+0x204>
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	0c 5f       	subi	r16, 0xFC	; 252
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	08 c0       	rjmp	.+16     	; 0x17c8 <vfprintf+0x214>
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	07 2e       	mov	r0, r23
    17be:	00 0c       	add	r0, r0
    17c0:	88 0b       	sbc	r24, r24
    17c2:	99 0b       	sbc	r25, r25
    17c4:	0e 5f       	subi	r16, 0xFE	; 254
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	f3 2d       	mov	r31, r3
    17ca:	ff 76       	andi	r31, 0x6F	; 111
    17cc:	3f 2e       	mov	r3, r31
    17ce:	97 ff       	sbrs	r25, 7
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <vfprintf+0x230>
    17d2:	90 95       	com	r25
    17d4:	80 95       	com	r24
    17d6:	70 95       	com	r23
    17d8:	61 95       	neg	r22
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	8f 4f       	sbci	r24, 0xFF	; 255
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	f0 68       	ori	r31, 0x80	; 128
    17e2:	3f 2e       	mov	r3, r31
    17e4:	2a e0       	ldi	r18, 0x0A	; 10
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	a3 01       	movw	r20, r6
    17ea:	33 d1       	rcall	.+614    	; 0x1a52 <__ultoa_invert>
    17ec:	88 2e       	mov	r8, r24
    17ee:	86 18       	sub	r8, r6
    17f0:	44 c0       	rjmp	.+136    	; 0x187a <vfprintf+0x2c6>
    17f2:	85 37       	cpi	r24, 0x75	; 117
    17f4:	31 f4       	brne	.+12     	; 0x1802 <vfprintf+0x24e>
    17f6:	23 2d       	mov	r18, r3
    17f8:	2f 7e       	andi	r18, 0xEF	; 239
    17fa:	b2 2e       	mov	r11, r18
    17fc:	2a e0       	ldi	r18, 0x0A	; 10
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	25 c0       	rjmp	.+74     	; 0x184c <vfprintf+0x298>
    1802:	93 2d       	mov	r25, r3
    1804:	99 7f       	andi	r25, 0xF9	; 249
    1806:	b9 2e       	mov	r11, r25
    1808:	8f 36       	cpi	r24, 0x6F	; 111
    180a:	c1 f0       	breq	.+48     	; 0x183c <vfprintf+0x288>
    180c:	18 f4       	brcc	.+6      	; 0x1814 <vfprintf+0x260>
    180e:	88 35       	cpi	r24, 0x58	; 88
    1810:	79 f0       	breq	.+30     	; 0x1830 <vfprintf+0x27c>
    1812:	ae c0       	rjmp	.+348    	; 0x1970 <vfprintf+0x3bc>
    1814:	80 37       	cpi	r24, 0x70	; 112
    1816:	19 f0       	breq	.+6      	; 0x181e <vfprintf+0x26a>
    1818:	88 37       	cpi	r24, 0x78	; 120
    181a:	21 f0       	breq	.+8      	; 0x1824 <vfprintf+0x270>
    181c:	a9 c0       	rjmp	.+338    	; 0x1970 <vfprintf+0x3bc>
    181e:	e9 2f       	mov	r30, r25
    1820:	e0 61       	ori	r30, 0x10	; 16
    1822:	be 2e       	mov	r11, r30
    1824:	b4 fe       	sbrs	r11, 4
    1826:	0d c0       	rjmp	.+26     	; 0x1842 <vfprintf+0x28e>
    1828:	fb 2d       	mov	r31, r11
    182a:	f4 60       	ori	r31, 0x04	; 4
    182c:	bf 2e       	mov	r11, r31
    182e:	09 c0       	rjmp	.+18     	; 0x1842 <vfprintf+0x28e>
    1830:	34 fe       	sbrs	r3, 4
    1832:	0a c0       	rjmp	.+20     	; 0x1848 <vfprintf+0x294>
    1834:	29 2f       	mov	r18, r25
    1836:	26 60       	ori	r18, 0x06	; 6
    1838:	b2 2e       	mov	r11, r18
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <vfprintf+0x294>
    183c:	28 e0       	ldi	r18, 0x08	; 8
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	05 c0       	rjmp	.+10     	; 0x184c <vfprintf+0x298>
    1842:	20 e1       	ldi	r18, 0x10	; 16
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <vfprintf+0x298>
    1848:	20 e1       	ldi	r18, 0x10	; 16
    184a:	32 e0       	ldi	r19, 0x02	; 2
    184c:	f8 01       	movw	r30, r16
    184e:	b7 fe       	sbrs	r11, 7
    1850:	07 c0       	rjmp	.+14     	; 0x1860 <vfprintf+0x2ac>
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	0c 5f       	subi	r16, 0xFC	; 252
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	06 c0       	rjmp	.+12     	; 0x186c <vfprintf+0x2b8>
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 5f       	subi	r16, 0xFE	; 254
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	a3 01       	movw	r20, r6
    186e:	f1 d0       	rcall	.+482    	; 0x1a52 <__ultoa_invert>
    1870:	88 2e       	mov	r8, r24
    1872:	86 18       	sub	r8, r6
    1874:	fb 2d       	mov	r31, r11
    1876:	ff 77       	andi	r31, 0x7F	; 127
    1878:	3f 2e       	mov	r3, r31
    187a:	36 fe       	sbrs	r3, 6
    187c:	0d c0       	rjmp	.+26     	; 0x1898 <vfprintf+0x2e4>
    187e:	23 2d       	mov	r18, r3
    1880:	2e 7f       	andi	r18, 0xFE	; 254
    1882:	a2 2e       	mov	r10, r18
    1884:	89 14       	cp	r8, r9
    1886:	58 f4       	brcc	.+22     	; 0x189e <vfprintf+0x2ea>
    1888:	34 fe       	sbrs	r3, 4
    188a:	0b c0       	rjmp	.+22     	; 0x18a2 <vfprintf+0x2ee>
    188c:	32 fc       	sbrc	r3, 2
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <vfprintf+0x2ee>
    1890:	83 2d       	mov	r24, r3
    1892:	8e 7e       	andi	r24, 0xEE	; 238
    1894:	a8 2e       	mov	r10, r24
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <vfprintf+0x2ee>
    1898:	b8 2c       	mov	r11, r8
    189a:	a3 2c       	mov	r10, r3
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <vfprintf+0x2f0>
    189e:	b8 2c       	mov	r11, r8
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <vfprintf+0x2f0>
    18a2:	b9 2c       	mov	r11, r9
    18a4:	a4 fe       	sbrs	r10, 4
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <vfprintf+0x312>
    18a8:	fe 01       	movw	r30, r28
    18aa:	e8 0d       	add	r30, r8
    18ac:	f1 1d       	adc	r31, r1
    18ae:	80 81       	ld	r24, Z
    18b0:	80 33       	cpi	r24, 0x30	; 48
    18b2:	21 f4       	brne	.+8      	; 0x18bc <vfprintf+0x308>
    18b4:	9a 2d       	mov	r25, r10
    18b6:	99 7e       	andi	r25, 0xE9	; 233
    18b8:	a9 2e       	mov	r10, r25
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <vfprintf+0x31a>
    18bc:	a2 fe       	sbrs	r10, 2
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <vfprintf+0x318>
    18c0:	b3 94       	inc	r11
    18c2:	b3 94       	inc	r11
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <vfprintf+0x31a>
    18c6:	8a 2d       	mov	r24, r10
    18c8:	86 78       	andi	r24, 0x86	; 134
    18ca:	09 f0       	breq	.+2      	; 0x18ce <vfprintf+0x31a>
    18cc:	b3 94       	inc	r11
    18ce:	a3 fc       	sbrc	r10, 3
    18d0:	10 c0       	rjmp	.+32     	; 0x18f2 <vfprintf+0x33e>
    18d2:	a0 fe       	sbrs	r10, 0
    18d4:	06 c0       	rjmp	.+12     	; 0x18e2 <vfprintf+0x32e>
    18d6:	b2 14       	cp	r11, r2
    18d8:	80 f4       	brcc	.+32     	; 0x18fa <vfprintf+0x346>
    18da:	28 0c       	add	r2, r8
    18dc:	92 2c       	mov	r9, r2
    18de:	9b 18       	sub	r9, r11
    18e0:	0d c0       	rjmp	.+26     	; 0x18fc <vfprintf+0x348>
    18e2:	b2 14       	cp	r11, r2
    18e4:	58 f4       	brcc	.+22     	; 0x18fc <vfprintf+0x348>
    18e6:	b6 01       	movw	r22, r12
    18e8:	80 e2       	ldi	r24, 0x20	; 32
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	76 d0       	rcall	.+236    	; 0x19da <fputc>
    18ee:	b3 94       	inc	r11
    18f0:	f8 cf       	rjmp	.-16     	; 0x18e2 <vfprintf+0x32e>
    18f2:	b2 14       	cp	r11, r2
    18f4:	18 f4       	brcc	.+6      	; 0x18fc <vfprintf+0x348>
    18f6:	2b 18       	sub	r2, r11
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x34a>
    18fa:	98 2c       	mov	r9, r8
    18fc:	21 2c       	mov	r2, r1
    18fe:	a4 fe       	sbrs	r10, 4
    1900:	0f c0       	rjmp	.+30     	; 0x1920 <vfprintf+0x36c>
    1902:	b6 01       	movw	r22, r12
    1904:	80 e3       	ldi	r24, 0x30	; 48
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	68 d0       	rcall	.+208    	; 0x19da <fputc>
    190a:	a2 fe       	sbrs	r10, 2
    190c:	16 c0       	rjmp	.+44     	; 0x193a <vfprintf+0x386>
    190e:	a1 fc       	sbrc	r10, 1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <vfprintf+0x364>
    1912:	88 e7       	ldi	r24, 0x78	; 120
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x368>
    1918:	88 e5       	ldi	r24, 0x58	; 88
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	b6 01       	movw	r22, r12
    191e:	0c c0       	rjmp	.+24     	; 0x1938 <vfprintf+0x384>
    1920:	8a 2d       	mov	r24, r10
    1922:	86 78       	andi	r24, 0x86	; 134
    1924:	51 f0       	breq	.+20     	; 0x193a <vfprintf+0x386>
    1926:	a1 fe       	sbrs	r10, 1
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x37a>
    192a:	8b e2       	ldi	r24, 0x2B	; 43
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x37c>
    192e:	80 e2       	ldi	r24, 0x20	; 32
    1930:	a7 fc       	sbrc	r10, 7
    1932:	8d e2       	ldi	r24, 0x2D	; 45
    1934:	b6 01       	movw	r22, r12
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	50 d0       	rcall	.+160    	; 0x19da <fputc>
    193a:	89 14       	cp	r8, r9
    193c:	30 f4       	brcc	.+12     	; 0x194a <vfprintf+0x396>
    193e:	b6 01       	movw	r22, r12
    1940:	80 e3       	ldi	r24, 0x30	; 48
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	4a d0       	rcall	.+148    	; 0x19da <fputc>
    1946:	9a 94       	dec	r9
    1948:	f8 cf       	rjmp	.-16     	; 0x193a <vfprintf+0x386>
    194a:	8a 94       	dec	r8
    194c:	f3 01       	movw	r30, r6
    194e:	e8 0d       	add	r30, r8
    1950:	f1 1d       	adc	r31, r1
    1952:	80 81       	ld	r24, Z
    1954:	b6 01       	movw	r22, r12
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	40 d0       	rcall	.+128    	; 0x19da <fputc>
    195a:	81 10       	cpse	r8, r1
    195c:	f6 cf       	rjmp	.-20     	; 0x194a <vfprintf+0x396>
    195e:	22 20       	and	r2, r2
    1960:	09 f4       	brne	.+2      	; 0x1964 <vfprintf+0x3b0>
    1962:	4e ce       	rjmp	.-868    	; 0x1600 <vfprintf+0x4c>
    1964:	b6 01       	movw	r22, r12
    1966:	80 e2       	ldi	r24, 0x20	; 32
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	37 d0       	rcall	.+110    	; 0x19da <fputc>
    196c:	2a 94       	dec	r2
    196e:	f7 cf       	rjmp	.-18     	; 0x195e <vfprintf+0x3aa>
    1970:	f6 01       	movw	r30, r12
    1972:	86 81       	ldd	r24, Z+6	; 0x06
    1974:	97 81       	ldd	r25, Z+7	; 0x07
    1976:	02 c0       	rjmp	.+4      	; 0x197c <vfprintf+0x3c8>
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	9f ef       	ldi	r25, 0xFF	; 255
    197c:	2b 96       	adiw	r28, 0x0b	; 11
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	bf 90       	pop	r11
    199a:	af 90       	pop	r10
    199c:	9f 90       	pop	r9
    199e:	8f 90       	pop	r8
    19a0:	7f 90       	pop	r7
    19a2:	6f 90       	pop	r6
    19a4:	5f 90       	pop	r5
    19a6:	4f 90       	pop	r4
    19a8:	3f 90       	pop	r3
    19aa:	2f 90       	pop	r2
    19ac:	08 95       	ret

000019ae <strnlen_P>:
    19ae:	fc 01       	movw	r30, r24
    19b0:	05 90       	lpm	r0, Z+
    19b2:	61 50       	subi	r22, 0x01	; 1
    19b4:	70 40       	sbci	r23, 0x00	; 0
    19b6:	01 10       	cpse	r0, r1
    19b8:	d8 f7       	brcc	.-10     	; 0x19b0 <strnlen_P+0x2>
    19ba:	80 95       	com	r24
    19bc:	90 95       	com	r25
    19be:	8e 0f       	add	r24, r30
    19c0:	9f 1f       	adc	r25, r31
    19c2:	08 95       	ret

000019c4 <strnlen>:
    19c4:	fc 01       	movw	r30, r24
    19c6:	61 50       	subi	r22, 0x01	; 1
    19c8:	70 40       	sbci	r23, 0x00	; 0
    19ca:	01 90       	ld	r0, Z+
    19cc:	01 10       	cpse	r0, r1
    19ce:	d8 f7       	brcc	.-10     	; 0x19c6 <strnlen+0x2>
    19d0:	80 95       	com	r24
    19d2:	90 95       	com	r25
    19d4:	8e 0f       	add	r24, r30
    19d6:	9f 1f       	adc	r25, r31
    19d8:	08 95       	ret

000019da <fputc>:
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	fb 01       	movw	r30, r22
    19e4:	23 81       	ldd	r18, Z+3	; 0x03
    19e6:	21 fd       	sbrc	r18, 1
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <fputc+0x16>
    19ea:	8f ef       	ldi	r24, 0xFF	; 255
    19ec:	9f ef       	ldi	r25, 0xFF	; 255
    19ee:	2c c0       	rjmp	.+88     	; 0x1a48 <fputc+0x6e>
    19f0:	22 ff       	sbrs	r18, 2
    19f2:	16 c0       	rjmp	.+44     	; 0x1a20 <fputc+0x46>
    19f4:	46 81       	ldd	r20, Z+6	; 0x06
    19f6:	57 81       	ldd	r21, Z+7	; 0x07
    19f8:	24 81       	ldd	r18, Z+4	; 0x04
    19fa:	35 81       	ldd	r19, Z+5	; 0x05
    19fc:	42 17       	cp	r20, r18
    19fe:	53 07       	cpc	r21, r19
    1a00:	44 f4       	brge	.+16     	; 0x1a12 <fputc+0x38>
    1a02:	a0 81       	ld	r26, Z
    1a04:	b1 81       	ldd	r27, Z+1	; 0x01
    1a06:	9d 01       	movw	r18, r26
    1a08:	2f 5f       	subi	r18, 0xFF	; 255
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	31 83       	std	Z+1, r19	; 0x01
    1a0e:	20 83       	st	Z, r18
    1a10:	8c 93       	st	X, r24
    1a12:	26 81       	ldd	r18, Z+6	; 0x06
    1a14:	37 81       	ldd	r19, Z+7	; 0x07
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	37 83       	std	Z+7, r19	; 0x07
    1a1c:	26 83       	std	Z+6, r18	; 0x06
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <fputc+0x6e>
    1a20:	8b 01       	movw	r16, r22
    1a22:	ec 01       	movw	r28, r24
    1a24:	fb 01       	movw	r30, r22
    1a26:	00 84       	ldd	r0, Z+8	; 0x08
    1a28:	f1 85       	ldd	r31, Z+9	; 0x09
    1a2a:	e0 2d       	mov	r30, r0
    1a2c:	09 95       	icall
    1a2e:	89 2b       	or	r24, r25
    1a30:	e1 f6       	brne	.-72     	; 0x19ea <fputc+0x10>
    1a32:	d8 01       	movw	r26, r16
    1a34:	16 96       	adiw	r26, 0x06	; 6
    1a36:	8d 91       	ld	r24, X+
    1a38:	9c 91       	ld	r25, X
    1a3a:	17 97       	sbiw	r26, 0x07	; 7
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	17 96       	adiw	r26, 0x07	; 7
    1a40:	9c 93       	st	X, r25
    1a42:	8e 93       	st	-X, r24
    1a44:	16 97       	sbiw	r26, 0x06	; 6
    1a46:	ce 01       	movw	r24, r28
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	08 95       	ret

00001a52 <__ultoa_invert>:
    1a52:	fa 01       	movw	r30, r20
    1a54:	aa 27       	eor	r26, r26
    1a56:	28 30       	cpi	r18, 0x08	; 8
    1a58:	51 f1       	breq	.+84     	; 0x1aae <__ultoa_invert+0x5c>
    1a5a:	20 31       	cpi	r18, 0x10	; 16
    1a5c:	81 f1       	breq	.+96     	; 0x1abe <__ultoa_invert+0x6c>
    1a5e:	e8 94       	clt
    1a60:	6f 93       	push	r22
    1a62:	6e 7f       	andi	r22, 0xFE	; 254
    1a64:	6e 5f       	subi	r22, 0xFE	; 254
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	af 4f       	sbci	r26, 0xFF	; 255
    1a6e:	b1 e0       	ldi	r27, 0x01	; 1
    1a70:	3e d0       	rcall	.+124    	; 0x1aee <__ultoa_invert+0x9c>
    1a72:	b4 e0       	ldi	r27, 0x04	; 4
    1a74:	3c d0       	rcall	.+120    	; 0x1aee <__ultoa_invert+0x9c>
    1a76:	67 0f       	add	r22, r23
    1a78:	78 1f       	adc	r23, r24
    1a7a:	89 1f       	adc	r24, r25
    1a7c:	9a 1f       	adc	r25, r26
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	68 0f       	add	r22, r24
    1a82:	79 1f       	adc	r23, r25
    1a84:	8a 1f       	adc	r24, r26
    1a86:	91 1d       	adc	r25, r1
    1a88:	a1 1d       	adc	r26, r1
    1a8a:	6a 0f       	add	r22, r26
    1a8c:	71 1d       	adc	r23, r1
    1a8e:	81 1d       	adc	r24, r1
    1a90:	91 1d       	adc	r25, r1
    1a92:	a1 1d       	adc	r26, r1
    1a94:	20 d0       	rcall	.+64     	; 0x1ad6 <__ultoa_invert+0x84>
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <__ultoa_invert+0x48>
    1a98:	68 94       	set
    1a9a:	3f 91       	pop	r19
    1a9c:	2a e0       	ldi	r18, 0x0A	; 10
    1a9e:	26 9f       	mul	r18, r22
    1aa0:	11 24       	eor	r1, r1
    1aa2:	30 19       	sub	r19, r0
    1aa4:	30 5d       	subi	r19, 0xD0	; 208
    1aa6:	31 93       	st	Z+, r19
    1aa8:	de f6       	brtc	.-74     	; 0x1a60 <__ultoa_invert+0xe>
    1aaa:	cf 01       	movw	r24, r30
    1aac:	08 95       	ret
    1aae:	46 2f       	mov	r20, r22
    1ab0:	47 70       	andi	r20, 0x07	; 7
    1ab2:	40 5d       	subi	r20, 0xD0	; 208
    1ab4:	41 93       	st	Z+, r20
    1ab6:	b3 e0       	ldi	r27, 0x03	; 3
    1ab8:	0f d0       	rcall	.+30     	; 0x1ad8 <__ultoa_invert+0x86>
    1aba:	c9 f7       	brne	.-14     	; 0x1aae <__ultoa_invert+0x5c>
    1abc:	f6 cf       	rjmp	.-20     	; 0x1aaa <__ultoa_invert+0x58>
    1abe:	46 2f       	mov	r20, r22
    1ac0:	4f 70       	andi	r20, 0x0F	; 15
    1ac2:	40 5d       	subi	r20, 0xD0	; 208
    1ac4:	4a 33       	cpi	r20, 0x3A	; 58
    1ac6:	18 f0       	brcs	.+6      	; 0x1ace <__ultoa_invert+0x7c>
    1ac8:	49 5d       	subi	r20, 0xD9	; 217
    1aca:	31 fd       	sbrc	r19, 1
    1acc:	40 52       	subi	r20, 0x20	; 32
    1ace:	41 93       	st	Z+, r20
    1ad0:	02 d0       	rcall	.+4      	; 0x1ad6 <__ultoa_invert+0x84>
    1ad2:	a9 f7       	brne	.-22     	; 0x1abe <__ultoa_invert+0x6c>
    1ad4:	ea cf       	rjmp	.-44     	; 0x1aaa <__ultoa_invert+0x58>
    1ad6:	b4 e0       	ldi	r27, 0x04	; 4
    1ad8:	a6 95       	lsr	r26
    1ada:	97 95       	ror	r25
    1adc:	87 95       	ror	r24
    1ade:	77 95       	ror	r23
    1ae0:	67 95       	ror	r22
    1ae2:	ba 95       	dec	r27
    1ae4:	c9 f7       	brne	.-14     	; 0x1ad8 <__ultoa_invert+0x86>
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	61 05       	cpc	r22, r1
    1aea:	71 05       	cpc	r23, r1
    1aec:	08 95       	ret
    1aee:	9b 01       	movw	r18, r22
    1af0:	ac 01       	movw	r20, r24
    1af2:	0a 2e       	mov	r0, r26
    1af4:	06 94       	lsr	r0
    1af6:	57 95       	ror	r21
    1af8:	47 95       	ror	r20
    1afa:	37 95       	ror	r19
    1afc:	27 95       	ror	r18
    1afe:	ba 95       	dec	r27
    1b00:	c9 f7       	brne	.-14     	; 0x1af4 <__ultoa_invert+0xa2>
    1b02:	62 0f       	add	r22, r18
    1b04:	73 1f       	adc	r23, r19
    1b06:	84 1f       	adc	r24, r20
    1b08:	95 1f       	adc	r25, r21
    1b0a:	a0 1d       	adc	r26, r0
    1b0c:	08 95       	ret

00001b0e <_exit>:
    1b0e:	f8 94       	cli

00001b10 <__stop_program>:
    1b10:	ff cf       	rjmp	.-2      	; 0x1b10 <__stop_program>
